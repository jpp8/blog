<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>RabbitMQ常见问题总结</title>
      <link href="/blog/2020/08/12/RabbitMQ%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
      <url>/blog/2020/08/12/RabbitMQ%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="No-method-found-for-class-B"><a href="#No-method-found-for-class-B" class="headerlink" title="No method found for class [B"></a>No method found for class [B</h2><ul><li>解决：consumer配置消息转换器，使用Jackson</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitConfig</span> &#123;  </span><br><span class="line">    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="keyword">public</span> MessageConverter <span class="title function_">messageConverter</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Listener-threw-exception"><a href="#Listener-threw-exception" class="headerlink" title="Listener threw exception"></a>Listener threw exception</h2><p>org.springframework.amqp.rabbit.support.ListenerExecutionFailedException: Listener threw exception</p><p>Cannot determine ReplyTo message property value: Request message does not contain reply-to property, and no default response Exchange was set.</p><ul><li>解决：接收消息的方法不能有返回值（void）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queue = &quot;simple.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage</span><span class="params">(Message message)</span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种情况：别用@rabbitHandler </p><h2 id="clean-channel-shutdown-消息发送成功，ConfirmCallback-ack返回为false"><a href="#clean-channel-shutdown-消息发送成功，ConfirmCallback-ack返回为false" class="headerlink" title="clean channel shutdown(消息发送成功，ConfirmCallback ack返回为false)"></a>clean channel shutdown(消息发送成功，ConfirmCallback ack返回为false)</h2><p>消息明明已经成功到达队列（经过交换机），可是在后台打印的日志还是显示：ack为false！</p><p>原因：在测试方法中测试，当测试方法结束，rabbitmq相关的资源也就关闭了，虽然我们的消息发送出去，但异步的ConfirmCallback却由于资源关闭而出现了上面的问题</p><p>解决：在测试方法中测试的话，让线程休眠几秒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;  </span><br><span class="line">    <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();  </span><br><span class="line">    dog.setId(UUID.randomUUID().toString());  </span><br><span class="line">    dog.setAge(<span class="number">2</span>);  </span><br><span class="line">    dog.setName(<span class="string">&quot;aaa&quot;</span>);  </span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName,routingKey,dog,<span class="keyword">new</span> <span class="title class_">CorrelationData</span>(UUID.randomUUID().toString()));  </span><br><span class="line">    System.out.println(<span class="string">&quot;发送成功!&quot;</span>);  </span><br><span class="line">    TimeUnit.SECONDS.sleep(<span class="number">3</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><p>correlationData:CorrelationData [id&#x3D;518952f3-139b-4f5e-9a9b-80f6e7588fec],ack:true,cause:null</p><p>success！！！！</p><h2 id="Channel-shutdown-channel-error；-protocol-method…"><a href="#Channel-shutdown-channel-error；-protocol-method…" class="headerlink" title="Channel shutdown: channel error； protocol method…"></a>Channel shutdown: channel error； protocol method…</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.rabbitmq.listener.simple.acknowledge-mode</span>=<span class="string">manual</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringAMQP常用注解总结</title>
      <link href="/blog/2020/07/21/RabbitMQ%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/"/>
      <url>/blog/2020/07/21/RabbitMQ%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h2><p>rabbitTemplate.convertAndSend()，如果发的是对象，&#x3D;&#x3D;要序列化&#x3D;&#x3D;</p><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>被序列化对象应提供一个无参的构造函数，否则会抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Jackson2JsonMessageConverter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MessageConverter <span class="title function_">jsonMessageConverter</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="监听消息"><a href="#监听消息" class="headerlink" title="监听消息"></a>监听消息</h2><p>监听消息的方法&#x3D;&#x3D;不能有返回值 –&gt; void&#x3D;&#x3D; ，如果是监听类，+  &#x3D;&#x3D;@Component</p><ul><li>@RabbitListener：可以标注在类上和方法上</li><li>@RabbitHandler：方法上，可以区分接收不同的消息</li></ul><h3 id="接收消息的方法参数"><a href="#接收消息的方法参数" class="headerlink" title="接收消息的方法参数"></a>接收消息的方法参数</h3><ul><li>Message message：消息，（springAMQP包下的）</li><li>Channel channel：通道，用来手动确认ACK</li><li>Object obj：对象<ul><li>如果对象共享，并明确得知传入的对象，就直接写对象名，方法注解可以使用<code>@RabbitHandler</code> 标注</li><li>如果对象不共享，比如分布式的情况，就用object来代替，不能使用&#96;@RabbitHandler</li></ul></li></ul><p>① 确定传入对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.test&quot;)</span>  </span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerListener</span> &#123;  </span><br><span class="line">    <span class="meta">@RabbitHandler</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getSimple</span><span class="params">(Message message, Channel channel, User user)</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;接收到的内容:\t&quot;</span>+user);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>② 不确定传入的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="meta">@RabbitListener</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerListener</span> &#123;  </span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;direct.queue&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessageInDirectQueue</span><span class="params">(Message message, Channel channel ,Object obj)</span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;接收到的消息：&quot;</span>+message);  </span><br><span class="line">        System.out.println(<span class="string">&quot;以成功接收：&quot;</span>+obj+<span class="string">&quot;,obj的类型：&quot;</span>+obj.getClass());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RabbitListener设置交换机和队列的绑定"><a href="#RabbitListener设置交换机和队列的绑定" class="headerlink" title="@RabbitListener设置交换机和队列的绑定"></a>@RabbitListener设置交换机和队列的绑定</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(</span></span><br><span class="line"><span class="meta">bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(value = &quot;topic.exchange&quot;,durable = &quot;true&quot;,type = &quot;topic&quot;),</span></span><br><span class="line"><span class="meta">        value = @Queue(value = &quot;consumer_queue&quot;,durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">        key = &quot;key.#&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processMessage1</span><span class="params">(Message message)</span> &#123;</span><br><span class="line">    System.out.println(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Payload、-Header"><a href="#Payload、-Header" class="headerlink" title="@Payload、@Header"></a>@Payload、@Header</h3><p>@Header：接收消息头<br>@Payload：接收消息体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;debug&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processMessage1</span><span class="params">(<span class="meta">@Payload</span> String body, <span class="meta">@Header</span> String token)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;body：&quot;</span>+body);</span><br><span class="line">    System.out.println(<span class="string">&quot;token：&quot;</span>+token);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="RabbitHandler"><a href="#RabbitHandler" class="headerlink" title="@RabbitHandler"></a>@RabbitHandler</h3><ul><li>@RabbitListener 可以标注在类上面，需配合 @RabbitHandler 注解一起使用</li><li>@RabbitListener 标注在类上面表示当有收到消息的时候，就交给 @RabbitHandler 的方法处理，具体使用哪个方法处理，根据 MessageConverter 转换后的参数类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;consumer_queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Receiver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processMessage1</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processMessage2</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        System.out.println(user.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ基础</title>
      <link href="/blog/2020/06/02/RabbitMQ%E5%9F%BA%E7%A1%80/"/>
      <url>/blog/2020/06/02/RabbitMQ%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="1、RabbitMQ基本架构"><a href="#1、RabbitMQ基本架构" class="headerlink" title="1、RabbitMQ基本架构"></a>1、RabbitMQ基本架构</h2><pre class="mermaid">graph LR        subgraph RabbitMQ_server_Broker                    subgraph VirtualHost                e1(exchange)-->|routing|q1(queue)            end        end        p(publisher)-->e1        q1-->c(consumer)</pre><ul><li>publisher：生产者</li><li>consumer：消费者</li><li>&#x3D;&#x3D;exchange&#x3D;&#x3D;：交换机，&#x3D;&#x3D;负责消息路由&#x3D;&#x3D;，Exchange有4种类型：&#x3D;&#x3D;direct(默认)，fanout, topic&#x3D;&#x3D;, 和headers，不同类型的Exchange转发消息的策略有所区别</li><li>queue：队列，存储消息</li><li>&#x3D;&#x3D;Binding&#x3D;&#x3D;：绑定，用于消息队列和交换器之间的关联。一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，所以可以将交换器理解成一个由绑定构成的路由表。Exchange 和Queue的绑定可以是多对多的关系。</li><li>Connection：网络连接，TCP</li><li>Channel：信道，信道是建立在真实的TCP连接内的虚拟连接，不管是发布消息、订阅队列还是接收消息，这些动作都是通过信道完成。</li><li>virtualHost：虚拟主机，隔离不同租户的exchange、queue、消息的隔离</li></ul><h2 id="2、RabbitMQ消息模型"><a href="#2、RabbitMQ消息模型" class="headerlink" title="2、RabbitMQ消息模型"></a>2、RabbitMQ消息模型</h2><ul><li>基本消息队列（Simple Queue）<ul><li>一对一</li></ul></li><li>工作消息队列（Work Queue）<ul><li>&#x3D;&#x3D;多个消费者&#x3D;&#x3D;绑定一个队列，&#x3D;&#x3D;消费同一队列的消息&#x3D;&#x3D;，消费者处于&#x3D;&#x3D;竞争消费&#x3D;&#x3D;的关系，当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理。此时可以使用&#x3D;&#x3D;工作队列模型&#x3D;&#x3D;</li></ul></li><li>发布订阅（pub&#x2F;sub）<ul><li>Fanout Exchange（广播）：一条消息会被&#x3D;&#x3D;所有消费者&#x3D;&#x3D;消费</li><li>Direct Exchange（定向&#x2F;路由）：&#x3D;&#x3D;精准匹配&#x3D;&#x3D;，交换机会通过不同的&#x3D;&#x3D;RoutingKey&#x3D;&#x3D;转发至不同的队列</li><li>Topic Exchange（订阅）：&#x3D;&#x3D;通配符&#x3D;&#x3D;匹配模式</li></ul></li></ul><h2 id="3、SpringAMQP"><a href="#3、SpringAMQP" class="headerlink" title="3、SpringAMQP"></a>3、SpringAMQP</h2><p>SpringAMQP是基于RabbitMQ封装的一套模板，并且还利用SpringBoot对其实现了自动装配</p><p>SpringAMQP提供了三个功能：</p><ul><li>自动声明队列、交换机及其绑定关系</li><li>基于注解的监听器模式，异步接收消息</li><li>封装了RabbitTemplate工具，用于发送消息</li></ul><h3 id="3-1、SimpleQueue（简单队列）"><a href="#3-1、SimpleQueue（简单队列）" class="headerlink" title="3.1、SimpleQueue（简单队列）"></a>3.1、SimpleQueue（简单队列）</h3><pre class="mermaid">graph LR        p(publisher)-->q(queue)-->c(consumer)</pre><p>官方的HelloWorld是基于最基础的消息队列模型来实现的，只包括三个角色：</p><ul><li>publisher：消息发布者，将消息发送到队列queue</li><li>queue：消息队列，负责接受并缓存消息</li><li>consumer：订阅队列，处理队列中的消息</li></ul><h4 id="①-生产者"><a href="#①-生产者" class="headerlink" title="① 生产者"></a>① 生产者</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--AMQP依赖，包含RabbitMQ--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.rabbitmq.host</span>=<span class="string">192.168.150.101</span></span><br><span class="line"><span class="attr">spring.rabbitmq.port</span>=<span class="string">5672</span></span><br><span class="line"><span class="attr">spring.rabbitmq.virtual-host</span>=<span class="string">/</span></span><br><span class="line"><span class="attr">spring.rabbitmq.username</span>=<span class="string">admin</span></span><br><span class="line"><span class="attr">spring.rabbitmq.password</span>=<span class="string">admin</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 普通队列</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHelloQueue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="string">&quot;hello.queue&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello,rabbitMQ&quot;</span>;</span><br><span class="line">    rabbitTemplate.convertAndSend(queue, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="②-消费者"><a href="#②-消费者" class="headerlink" title="② 消费者"></a>② 消费者</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.rabbitmq.host</span>=<span class="string">192.168.150.101</span></span><br><span class="line"><span class="attr">spring.rabbitmq.port</span>=<span class="string">5672</span></span><br><span class="line"><span class="attr">spring.rabbitmq.virtual-host</span>=<span class="string">/</span></span><br><span class="line"><span class="attr">spring.rabbitmq.username</span>=<span class="string">admin</span></span><br><span class="line"><span class="attr">spring.rabbitmq.password</span>=<span class="string">admin</span></span><br></pre></td></tr></table></figure><p>消费者监听类</p><ul><li>用于监听消息 ，使用<code>@RabbitListener</code></li><li>启动类&#x2F;配置文件 + <code>@EnableRabbit</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQListeners</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 普通队列接收消息方法</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@RabbitListener</span>(queuesToDeclare = <span class="doctag">@Queue</span>(&quot;hello&quot;))给queuesToDeclare赋值声明队列 <span class="doctag">@Queue</span>创建队列</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@RabbitListener(queuesToDeclare = @Queue(&quot;hello.queue&quot;))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenerFromHelloQueue</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (message != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;接收到的消息是：&quot;</span> + message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2、WorkQueue（工作队列）"><a href="#3-2、WorkQueue（工作队列）" class="headerlink" title="3.2、WorkQueue（工作队列）"></a>3.2、WorkQueue（工作队列）</h3><pre class="mermaid">graph LR        p(pulisher)-->q(queue)        q-->s1(consumer1)        q-->s2(consumer2)</pre><ul><li>一个队列有多个消费者进行消费，每个消费者是&#x3D;&#x3D;竞争关系&#x3D;&#x3D;，一条消息只会被一个消费者处理，消费者越多，处理的消息速度就越快</li><li>默认情况下，消息会平均分摊给每个消费者，&#x3D;&#x3D;采取轮询的方式去分发消息</li><li>可以在配置文件中配置 <code>prefatch</code> 来&#x3D;&#x3D;控制消费者取消息的数量&#x3D;&#x3D;</li></ul><h4 id="①-生产者-1"><a href="#①-生产者-1" class="headerlink" title="① 生产者"></a>① 生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* workQueue队列</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWorkQueue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="string">&quot;workTest.queue&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello,workQueue...&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(queue, message + i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="②-消费者-1"><a href="#②-消费者-1" class="headerlink" title="② 消费者"></a>② 消费者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* workQueue01,监听workQueue队列</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RabbitListener(queuesToDeclare = @Queue(&quot;workTest.queue&quot;))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenerFromWorkQueue01</span><span class="params">(String message)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (message != <span class="literal">null</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是workQueue01，接收到的是：&quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* workQueue02,监听workQueue队列</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RabbitListener(queuesToDeclare = @Queue(&quot;workTest.queue&quot;))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenerFromWorkQueue02</span><span class="params">(String message)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (message != <span class="literal">null</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是workQueue02，接收到的消息是：&quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="③-控制消费数量"><a href="#③-控制消费数量" class="headerlink" title="③ 控制消费数量"></a>③ 控制消费数量</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每次只获取一条消息</span></span><br><span class="line"><span class="attr">spring.rabbitmq.listener.simple.prefetch</span>=<span class="string">1</span></span><br></pre></td></tr></table></figure><h3 id="3-3、Fanout广播（Pub-x2F-Sub）"><a href="#3-3、Fanout广播（Pub-x2F-Sub）" class="headerlink" title="3.3、Fanout广播（Pub&#x2F;Sub）"></a>3.3、Fanout广播（Pub&#x2F;Sub）</h3><p>消息发送到交换机，&#x3D;&#x3D;交换机将消息广播到它知道的所有队列&#x3D;&#x3D;，再发送至消费者</p><p><strong>总结</strong>：一条消息会被&#x3D;&#x3D;所有的消费者消费&#x3D;&#x3D;，交换机不存储消息，&#x3D;&#x3D;只转发消息&#x3D;&#x3D;</p><pre class="mermaid">graph LR        p(pulisher)-->e(Fanout.Exchange)        e-->q1(queue1)        q1-->s1(consumer1)        e-->q2(queue2)        q2-->s2(consumer2)</pre><ul><li>定义交换机和队列</li><li>进行&#x3D;&#x3D;交换机和队列的绑定&#x3D;&#x3D;</li><li>生产者发送消息到交换机</li><li>消费者监听队列</li></ul><h4 id="①-生产者-2"><a href="#①-生产者-2" class="headerlink" title="① 生产者"></a>① 生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* fanout模式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFanout</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">exchange</span> <span class="operator">=</span> <span class="string">&quot;fanout.test&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello,fanout...&quot;</span>;</span><br><span class="line">    rabbitTemplate.convertAndSend(exchange, <span class="string">&quot;&quot;</span>, message);</span><br><span class="line">    System.out.println(<span class="string">&quot;发送成功。。。&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="②-消费者-2"><a href="#②-消费者-2" class="headerlink" title="② 消费者"></a>② 消费者</h4><p>申明交换机和队列并绑定</p><ul><li>Exchange：交换机</li><li>Queue：队列</li><li>Binding：绑定关系</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.FanoutExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 声明交换机</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> Fanout类型交换机</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;fanout.test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 第1个队列</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue1()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 第2个队列</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue2()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>消费者监听</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;fanout.queue1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fanoutQueue01</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (message != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;queue01收到的消息是：&quot;</span> + message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;fanout.queue2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fanoutQueue02</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (message != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;queue02收到的消息是：&quot;</span> + message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4、Direct-精准匹配（Pub-x2F-Sub-默认）"><a href="#3-4、Direct-精准匹配（Pub-x2F-Sub-默认）" class="headerlink" title="3.4、Direct 精准匹配（Pub&#x2F;Sub 默认）"></a>3.4、Direct 精准匹配（Pub&#x2F;Sub 默认）</h3><p>制定发送，根据不同的&#x3D;&#x3D;RoutingKey&#x3D;&#x3D;发送到不同的队列</p><ul><li>Exchange会&#x3D;&#x3D;根据RoutingKey&#x3D;&#x3D;将消息发送到指定队列<ul><li>每一个queue会和exchange设置一个<code>bindingKey</code>，bingdingKey是&#x3D;&#x3D;交换机和队列的关系</li><li>生产者发送消息时指定一个<code>routingKey</code></li><li>当发送消息时，<code>routingKey</code>和<code>bindingKey</code>一致时，&#x3D;&#x3D;发送到相应的队列&#x3D;&#x3D;</li></ul></li></ul><pre class="mermaid">graph LR        p(pulisher)-->e(Direct.Exchange)        e-->|AAA_key|q1(queue1)        q1-->s1(consumer1)        e-->|BBB_key|q2(queue2)        q2-->s2(consumer2)</pre><blockquote><p>当publisher指定的routingkey &#x3D; AAA_key, 消息便发送到queue1中，consumer1接收消息</p></blockquote><h4 id="①-消费者"><a href="#①-消费者" class="headerlink" title="① 消费者"></a>① 消费者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.consumer_demo.listeners;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Exchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.QueueBinding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 使用注解方式绑定交换机和队列</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectListener</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 绑定交换机和队列01，bindingKey：“01”，“03”</span></span><br><span class="line"><span class="comment">* <span class="doctag">@QueueBinding</span>：exchage和queue之间的绑定</span></span><br><span class="line"><span class="comment">    * value = <span class="doctag">@Queue</span>(&quot;direct.queue01&quot;), 申明队列</span></span><br><span class="line"><span class="comment">    * exchange = <span class="doctag">@Exchange</span>(&quot;direct.Test&quot;),  申明交换机</span></span><br><span class="line"><span class="comment">    * key = &#123;&quot;01&quot;, &quot;03&quot;&#125;   bindingKey</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(&quot;direct.queue01&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(&quot;direct.Test&quot;),</span></span><br><span class="line"><span class="meta">        key = &#123;&quot;01&quot;, &quot;03&quot;&#125;</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenerFromDirect01</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (message != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我是01，我收到的消息是：&quot;</span> + message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 绑定交换机和队列01，bindingKey：“02”，“03”</span></span><br><span class="line"><span class="comment">    * value = <span class="doctag">@Queue</span>(&quot;direct.queue01&quot;), 申明队列</span></span><br><span class="line"><span class="comment">    * exchange = <span class="doctag">@Exchange</span>(&quot;direct.Test&quot;),  申明交换机</span></span><br><span class="line"><span class="comment">    * key = &#123;&quot;02&quot;, &quot;03&quot;&#125;   bindingKey</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(&quot;direct.queue02&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(&quot;direct.Test&quot;),</span></span><br><span class="line"><span class="meta">        key = &#123;&quot;02&quot;, &quot;03&quot;&#125;</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenerFromDirect02</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (message != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我是02，我收到的消息是：&quot;</span> + message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="②-生产者"><a href="#②-生产者" class="headerlink" title="② 生产者"></a>② 生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* direct模式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDirect</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">exchange</span> <span class="operator">=</span> <span class="string">&quot;direct.Test&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">message01</span> <span class="operator">=</span> <span class="string">&quot;hello,direct01...&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">message02</span> <span class="operator">=</span> <span class="string">&quot;hello,direct02...&quot;</span>;</span><br><span class="line">    <span class="comment">// routingKye : &quot;01&quot;</span></span><br><span class="line">    rabbitTemplate.convertAndSend(exchange, <span class="string">&quot;01&quot;</span>, message01);</span><br><span class="line">    <span class="comment">// routingKye : &quot;01&quot;</span></span><br><span class="line">    <span class="comment">//rabbitTemplate.convertAndSend(exchange,&quot;02&quot;,message02);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5、Topic通配符匹配（Pub-x2F-Sub）"><a href="#3-5、Topic通配符匹配（Pub-x2F-Sub）" class="headerlink" title="3.5、Topic通配符匹配（Pub&#x2F;Sub）"></a>3.5、Topic通配符匹配（Pub&#x2F;Sub）</h3><p>通配符匹配</p><p>TopicExchange 和 DirectExchange 类似，&#x3D;&#x3D;区别在于BindingKey由多个单词组成，之间用 “.” 分割&#x3D;&#x3D;<br>，比如 “topic.test”</p><h4 id="通配符规则"><a href="#通配符规则" class="headerlink" title="通配符规则"></a>通配符规则</h4><ul><li><h1 id="：匹配一个或多个"><a href="#：匹配一个或多个" class="headerlink" title="：匹配一个或多个"></a>：匹配一个或多个</h1><ul><li>test.#：能匹配test.a.b.c或者 test.m</li></ul></li><li><ul><li>：匹配一个</li></ul><ul><li>test.* ：只能匹配test.a，text.b，test.c</li></ul></li></ul><p>例：RoutingKey：</p><ul><li>china.test01</li><li>china.test02</li><li>test01.news</li><li>test02.news</li></ul><pre class="mermaid">graph LR        p(pulisher)-->e(Topic.Exchange)        e-->|china.#|q1(queue1)        q1-->s1(consumer1)        e-->|#.news|q2(queue2)        q2-->s2(consumer2)</pre><blockquote><p>当生产者的RoutingKey指定的是china.# 时，由交换机转发到queue1中<br>如果是#.news，发送到queue2中</p></blockquote><h4 id="①-生产者-3"><a href="#①-生产者-3" class="headerlink" title="① 生产者"></a>① 生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* topic模式发送匹配china前缀</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTopicOfChina</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">exchange</span> <span class="operator">=</span> <span class="string">&quot;topic.Test&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;china.test01...&quot;</span>;</span><br><span class="line">    rabbitTemplate.convertAndSend(exchange, <span class="string">&quot;china.test01&quot;</span>, message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* topic模式发送匹配news前缀</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTopicOfNews</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">exchange</span> <span class="operator">=</span> <span class="string">&quot;topic.Test&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;test.news...&quot;</span>;</span><br><span class="line">    rabbitTemplate.convertAndSend(exchange, <span class="string">&quot;test.news&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="②-消费者-3"><a href="#②-消费者-3" class="headerlink" title="② 消费者"></a>② 消费者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.consumer_demo.listeners;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Exchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.QueueBinding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* topic模式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicListener</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 队列1， key = &quot;china.#&quot;，</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(&quot;topic01.Test&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(value = &quot;topic.Test&quot;, type = &quot;topic&quot;),</span></span><br><span class="line"><span class="meta">        key = &quot;china.#&quot;</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenerFromTopic</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (message != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;china...收到的消息是：&quot;</span> + message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 队列1， key = &quot;*.news&quot;，</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(&quot;topic02.Test&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(value = &quot;topic.Test&quot;, type = &quot;topic&quot;),</span></span><br><span class="line"><span class="meta">        key = &quot;*.news&quot;</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenerFromTopic02</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (message != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;news...收到的消息是：&quot;</span> + message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、消息转换器序列化"><a href="#4、消息转换器序列化" class="headerlink" title="4、消息转换器序列化"></a>4、消息转换器序列化</h2><p>默认情况下Spring采用的序列化方式是JDK序列化。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MessageConverter <span class="title function_">jsonMessageConverter</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 消息转换</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJackson</span><span class="params">()</span> &#123;</span><br><span class="line">    HashMap&lt;String, String&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    hashMap.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="string">&quot;jackson.queue&quot;</span>;</span><br><span class="line">    rabbitTemplate.convertAndSend(queue, hashMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringCLoud</title>
      <link href="/blog/2020/03/06/SpringCloud/"/>
      <url>/blog/2020/03/06/SpringCloud/</url>
      
        <content type="html"><![CDATA[<h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><p>SpringCloud是目前国内使用最广泛的微服务框架。官网地址：<a href="https://spring.io/projects/spring-cloud%E3%80%82">https://spring.io/projects/spring-cloud。</a><br>SpringCloud集成了各种微服务功能组件，并基于SpringBoot实现了这些组件的自动装配，从而提供了良好的开箱即用体验</p><p>springcloud是一整套<strong>服务治理方案</strong></p><h2 id="2、SpringCloud组成"><a href="#2、SpringCloud组成" class="headerlink" title="2、SpringCloud组成"></a>2、SpringCloud组成</h2><ul><li>Eureka：服务注册中心，用于服务管理。</li><li>Ribbon：基于客户端的负载均衡组件。</li><li>Hystrix：容错框架，能够防止服务的雪崩效应。</li><li>Feign：Web 服务客户端，能够简化 HTTP 接口的调用。</li><li>Zuul&#x2F;Gateway：API 网关，提供路由转发、请求过滤等功能。</li><li>Config：分布式配置管理。</li><li>Sleuth：服务跟踪。</li><li>Stream：构建消息驱动的微服务应用程序的框架。</li><li>Bus：消息代理的集群消息总线。</li></ul><h2 id="3、Eureka"><a href="#3、Eureka" class="headerlink" title="3、Eureka"></a>3、Eureka</h2><p>在Eureka架构中，微服务角色有两类：erueka-server，erueka-client</p><ul><li>服务端（erueka-server），<strong>注册中心</strong>：<strong>记录服务</strong>信息，<strong>心跳检测</strong>90秒没有收到心跳，剔除</li><li>客户端（erueka-client）：<ul><li>服务提供者：向server注册自己（<strong>服务注册</strong>），每30秒发送心跳</li><li>服务消费者：从server中拉取服务信息（<strong>服务拉取</strong>）</li></ul></li></ul><pre class="mermaid">graph BT        e(eureka-server)        c(consumer-client)        p(producter-client)            c---|服务发现/拉取|e        p-.->|注册|e</pre><h3 id="3-1、Eureka-Server"><a href="#3-1、Eureka-Server" class="headerlink" title="3.1、Eureka-Server"></a>3.1、Eureka-Server</h3><ol><li>引入依赖</li><li>配置文件配置server地址</li><li>启动类&#x2F;配置类+<code>@EnableEurekaServer</code></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#禁止注册自己</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:8080/eureka</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2、Eureka-client"><a href="#3-2、Eureka-client" class="headerlink" title="3.2、Eureka-client"></a>3.2、Eureka-client</h3><h4 id="①-producter"><a href="#①-producter" class="headerlink" title="① producter"></a>① producter</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userservice</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:8080/eureka</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaClientApplication</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaClientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="②-consumer（同上）"><a href="#②-consumer（同上）" class="headerlink" title="② consumer（同上）"></a>② consumer（同上）</h4><h3 id="3-3、Eureka集群（实现高可用）"><a href="#3-3、Eureka集群（实现高可用）" class="headerlink" title="3.3、Eureka集群（实现高可用）"></a>3.3、Eureka集群（实现高可用）</h3><p>相互注册</p><pre class="mermaid">graph LR        subgraph eureka集群        e1(eureka1)        e2(eureka2)        end        e1-->e2        e2-->e1        producter-->|注册|e1        producter-->|注册|e2</pre><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span> <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>     <span class="comment">#false表示不向注册中心注册自己。</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>     <span class="comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">    <span class="comment">#集群指向其它eureka</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka/</span></span><br><span class="line">    <span class="comment">#单机就是7001自己</span></span><br><span class="line">      <span class="comment">#defaultZone: http://eureka7001.com:7001/eureka/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7002</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7002.com</span> <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>     <span class="comment">#false表示不向注册中心注册自己。</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>     <span class="comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">    <span class="comment">#集群指向其它eureka</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br><span class="line">    <span class="comment">#单机就是7002自己</span></span><br><span class="line">      <span class="comment">#defaultZone: http://eureka7002.com:7002/eureka/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>服务注册进两个注册中心</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#表示是否将自己注册进Eurekaserver默认为true。</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetchRegistry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,</span> <span class="string">http://eureka7002.com:7002/eureka</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-4、Eureka自我保护机制"><a href="#3-4、Eureka自我保护机制" class="headerlink" title="3.4、Eureka自我保护机制"></a>3.4、Eureka自我保护机制</h3><p>EurekaClient每隔30s会向server发送心跳，当server90秒没有收到心跳，默认会剔除该服务，但这时server会开启自我保护机制，不会剔除该服务，保留该服务的实例。</p><h2 id="4、Ribbon"><a href="#4、Ribbon" class="headerlink" title="4、Ribbon"></a>4、Ribbon</h2><p>Spring Cloud Ribbon是基于Netflix Ribbon实现的一套<strong>客户端负载均衡的工具</strong>。</p><p>Ribbon+RestTemplate 实现<strong>负载均衡远程调用</strong>，实现<strong>高可用</strong></p><pre class="mermaid">graph BT        subgraph producters            p1(producter1)            p2(producter2)        end        p1-->|注册|EurekaServer        p2-->|注册|EurekaServer        c(consumer)-->|拉取服务|EurekaServer        c-.->|RestTemplate+Ribbon|p2</pre><h3 id="4-1、使用"><a href="#4-1、使用" class="headerlink" title="4.1、使用"></a>4.1、使用</h3><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupld</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupld</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactld</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置RestTemplate+ @LoadBalanced ：负载均衡</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeansConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span>   <span class="comment">// </span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用RestTemaplate 调用服务提供者（用法详见Springboot章节）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OderServiceApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// USERSERVICE ：注册中心的实例名称</span></span><br><span class="line">        <span class="comment">// spring.application.name</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://USERSERVICE/users/2&quot;</span>;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> restTemplate.getForObject(url, User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2、Ribbon负载均衡流程"><a href="#4-2、Ribbon负载均衡流程" class="headerlink" title="4.2、Ribbon负载均衡流程"></a>4.2、Ribbon负载均衡流程</h3><pre class="mermaid">graph LR        请求-->|1.拦截|Ribbon        Ribbon--> 注册中心        注册中心--> |2.服务实例信息|Ribbon        Ribbon-->|3.轮询| client</pre><p>消费者发送请求<br>loadBalancer负载均衡拦截器进行拦截<br>获取服务id<br>从server中找到服务id，获取服务ip<br>选择负载均衡算法调用服务</p><h2 id="5、Feign"><a href="#5、Feign" class="headerlink" title="5、Feign"></a>5、Feign</h2><p>声明式<strong>http客户端</strong>，默认整合了Ribbon实现了<strong>负载均衡</strong><br>取代RestTemplae</p><h3 id="5-1、使用"><a href="#5-1、使用" class="headerlink" title="5.1、使用"></a>5.1、使用</h3><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动类&#x2F;配置类+@EnableFeignClients，开启feign功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;com.test.feign.clients&quot;)</span></span><br><span class="line"><span class="comment">// 开启feign功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OderServiceApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OderServiceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写FeignClient接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// name：服务提供者的服务名称，spring.application.name</span></span><br><span class="line"><span class="meta">@FeignClient(name = &quot;userservice&quot;)</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> &#123;</span><br><span class="line"><span class="comment">// 服务提供者对外暴露的接口controller</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/users/&#123;id&#125;&quot;)</span> </span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2、Feign的日志级别及连接池配置"><a href="#5-2、Feign的日志级别及连接池配置" class="headerlink" title="5.2、Feign的日志级别及连接池配置"></a>5.2、Feign的日志级别及连接池配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">default:</span> <span class="comment"># default全局的配置</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">BASIC</span> <span class="comment"># 日志级别，BASIC就是基本的请求和响应信息</span></span><br></pre></td></tr></table></figure><p>Feign底层的客户端实现：</p><ul><li>URLConnection：默认实现，不支持连接池</li><li>Apache HttpClient ：支持连接池</li><li>OKHttp：支持连接池</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--httpClient的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">default:</span> <span class="comment"># default全局的配置</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">BASIC</span> <span class="comment"># 日志级别，BASIC就是基本的请求和响应信息</span></span><br><span class="line">  <span class="attr">httpclient:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启feign对HttpClient的支持</span></span><br><span class="line">    <span class="attr">max-connections:</span> <span class="number">200</span> <span class="comment"># 最大的连接数</span></span><br><span class="line">    <span class="attr">max-connections-per-route:</span> <span class="number">50</span> <span class="comment"># 每个路径的最大连接</span></span><br></pre></td></tr></table></figure><blockquote><p>使用连接池代替默认的URLConnection<br>  日志级别，最好用basic或none</p></blockquote><h2 id="6、Hystrix"><a href="#6、Hystrix" class="headerlink" title="6、Hystrix"></a>6、Hystrix</h2><p>解决分布式系统中容错和延迟的组件，解决<strong>服务超时，宕机</strong>的微服务组件</p><p>分布式系统中，在多个服务相互调用时，有一个超时，宕机，就会影响到其他服务，严重会导致整个系统服务雪崩</p><p>功能：</p><ul><li>服务降级：当服务提供者发生<strong>异常，超时</strong>，提供给消费者的<strong>备用方案</strong>（fallback）</li><li>服务熔断：<strong>熔断该服务</strong>，<strong>拒绝访问</strong>，<strong>直接返回服务降级</strong>（fallback方法）</li><li>服务限流：对服务的请求进行限流</li></ul><h3 id="6-1、服务降级"><a href="#6-1、服务降级" class="headerlink" title="6.1、服务降级"></a>6.1、服务降级</h3><h4 id="①-单独方法降级处理"><a href="#①-单独方法降级处理" class="headerlink" title="① 单独方法降级处理"></a>① 单独方法降级处理</h4><ul><li>服务提供者的方法+@<code>HystrixCommand</code>(<code>fallbackMethod</code> &#x3D; “xxx”) fallbackMethod指定fallback方法。</li><li>启动类+<code>@EnableHystrix</code></li></ul><p>Hystrix的超时时间<strong>默认为1000ms</strong>，超过自动调用fallback方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducterService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟服务超时，或出现异常情况</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod = &quot;getTimeFallBack&quot;/* 指定fallback方法*/)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTime</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;producter--id: &quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 服务降级方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTimeFallBack</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;服务器超时。。。+ 不能获取id为：&quot;</span> + id + <span class="string">&quot;的商品信息&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="②-超时时间配置"><a href="#②-超时时间配置" class="headerlink" title="② 超时时间配置"></a>② 超时时间配置</h4><p>单独配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand(fallbackMethod=&quot;fallback&quot;,</span></span><br><span class="line"><span class="meta">commandProperties = &#123;</span></span><br><span class="line"><span class="meta">     @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;1000&quot; )</span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure><p>全局配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">3000</span></span><br></pre></td></tr></table></figure><h4 id="③-统一全局降级处理"><a href="#③-统一全局降级处理" class="headerlink" title="③ 统一全局降级处理"></a>③ 统一全局降级处理</h4><ul><li>类上+@DefaultProperties(defauleFallback&#x3D;”全局fallback方法”)</li><li>方法上+@HystrixCommand</li></ul><p>如果有哪个方法<strong>单独指定</strong>了fallback，则<strong>不走全局方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@DefaultProperties(defaultFallback = &quot;defaultMethod&quot;)</span> <span class="comment">// 指定全局统一fallBack方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducterService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定fallback方法，不走全局fallback</span></span><br><span class="line"><span class="meta">@HystrixCommand(fallbackMethod=&quot;getTimeFallBack&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;producter--id:...&quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 没有指定fallBack方法，走全局统一fallBack</span></span><br><span class="line">    <span class="meta">@HystrixCommand</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTime</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="comment">//int i = 1 / 0;</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">time</span> <span class="operator">=</span> <span class="number">2000</span>;</span><br><span class="line">        Thread.sleep(time);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;time:...&quot;</span> + time + <span class="string">&quot; ,producter--id: &quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTimeFallBack</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;服务器超时。。。+ 不能获取id为：&quot;</span> + id + <span class="string">&quot;的商品信息&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">defaultMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;全局服务降级。。。&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2、Feign-Fallback"><a href="#6-2、Feign-Fallback" class="headerlink" title="6.2、Feign+Fallback"></a>6.2、Feign+Fallback</h3><p>Feign默认整合了Hystrix</p><h4 id="①-使用"><a href="#①-使用" class="headerlink" title="① 使用"></a>① 使用</h4><p>yml中开启Feign的hystrix功能</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>编写Feign接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * fegin调用时，如果提供者发生异常，超时等，则服务降级</span></span><br><span class="line"><span class="comment"> * fallback = ConsumerFeginClientImpl.class</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FeignClient(name = &quot;hystrix-puducter-demo&quot;, fallback = ConsumerFeginClientImpl.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ConsumerFeginClient</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/producter/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getID</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/producter/time/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTime</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Fallback服务降级类，<strong>实现FeignClient 接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerFeginClientImpl</span> <span class="keyword">implements</span> <span class="title class_">ConsumerFeginClient</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getID</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;consumer feginClient getId Callback&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTime</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;consumer feginClient getTime Callback&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-3、服务熔断"><a href="#6-3、服务熔断" class="headerlink" title="6.3、服务熔断"></a>6.3、服务熔断</h3><p>熔断机制是<strong>应对服务雪崩</strong>的服务链路保护机制</p><p>Hystrix–&gt;以<strong>失败率</strong>为熔断条件</p><p>熔断流程</p><p>服务超时，异常，触发服务降级（fallback）<br>服务降级会跳过正常方法，调用fallback方法<br>当服务降级次数达到一定的阈值（5秒内20次），就会自动熔断该服务，熔断后服务不可用，直接返回降级方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentService</span>&#123;    </span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//=====服务熔断</span></span><br><span class="line">        <span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentCircuitBreaker_fallback&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;circuitBreaker.enabled&quot;,value = &quot;true&quot;),// 是否开启断路器</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;,value = &quot;10&quot;),// 请求次数</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;circuitBreaker.sleepWindowInMilliseconds&quot;,value = &quot;10000&quot;), // 时间窗口期</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;circuitBreaker.errorThresholdPercentage&quot;,value = &quot;60&quot;),// 失败率达到多少后跳闸</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span>&#123;</span><br><span class="line">            .....</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="参数说明（官方文档）"><a href="#参数说明（官方文档）" class="headerlink" title="参数说明（官方文档）"></a>参数说明（官方文档）</h4><p>circuitBreaker.enabled：此属性确定断路器是否将用于跟踪运行状况和短路请求（如果熔断）。</p><p>circuitBreaker.requestVolumeThreshold：此属性在滚动窗口中设置将跳过请求链路的最小请求数。</p><p>例如，如果值为20，则如果在滚动窗口（例如10秒的窗口）中仅接收到19个请求，则即使所有19个请求失败，电路也不会熔断。</p><p>（备注：断路器熔断的最小值阀值<br>如果单位时间内请求小于这个值，断路器永远不会熔断。）</p><p>circuitBreaker.sleepWindowInMilliseconds：此属性设置在调用链路熔断之后，在允许再次尝试确定调用链路是否应闭合之前拒绝请求的时间量。</p><p>（备注：可以理解为，调用链路熔断后，一定时间后(默认5秒)，将再次重试调用run()方法，检测是否需要闭合调用链路。实际多线程测试的过程中，只有一个线程会尝试闭合链路，如果仍旧符合熔断条件（比如默认值，响应时间大于1秒），则继续熔断。其他线程一直处于熔断状态，这种设计比较节省调用者的资源，没有必要所有线程都去尝试闭合。）</p><p>circuitBreaker.errorThresholdPercentage</p><p>此属性设置错误百分比，在该值或以上时调用链路应熔断，并开始短路请求到fallback逻辑。</p><p>错误数达到或超过配置值时，执行熔断操作，调用fallback.注意此百分比是值在一定时间范围内（默认10秒，见metrics.rollingStats.timeInMilliseconds）</p><p>circuitBreaker.forceOpen</p><p>该属性，如果为true，强制断路器进入打开（熔断）状态，其中它将拒绝所有请求。此属性优先 _circuitBreaker.forceClosed_。</p><h4 id="熔断器状态"><a href="#熔断器状态" class="headerlink" title="熔断器状态"></a>熔断器状态</h4><ul><li>熔断打开：请求不再进行调用当前服务，内部设置时钟一般为MTTR(平均故障处理时间)，当打开时长达到所设时钟则进入半熔断状态。</li><li>熔断关闭：熔断关闭不会对服务进行熔断。</li><li>熔断半开：部分请求根据规则调用当前服务，如果请求成功且符合规则则认为当前服务恢复正常，关闭熔断</li></ul><h4 id="打开或关闭的条件"><a href="#打开或关闭的条件" class="headerlink" title="打开或关闭的条件"></a>打开或关闭的条件</h4><p>到达以下阀值，断路器将会开启：</p><p>当满足一定的阀值的时候（默认10秒内超过20个请求次数)<br>当失败率达到一定的时候（默认10秒内超过50%的请求失败)<br>当开启的时候，所有请求都不会进行转发</p><p>一段时间之后（默认是5秒)，这个时候断路器是半开状态，会让其中一个请求进行转发。如果成功，断路器会关闭，若失败，继续开启。</p><h2 id="7、GateWay"><a href="#7、GateWay" class="headerlink" title="7、GateWay"></a>7、GateWay</h2><p>网关，所有微服务的统一入口，自己也是一个微服务，需要注册到注册中心中。</p><p>作用：</p><ul><li>路由转发：根据路由规则转发到相应的微服务中</li><li>权限控制：校验权限</li><li>限流：当请求量过高时，网关根据下流微服务能够接收的速度来放行，避免微服务压力过大</li></ul><h3 id="7-1、路由配置"><a href="#7-1、路由配置" class="headerlink" title="7.1、路由配置"></a>7.1、路由配置</h3><p>主要配置路由，断言，过滤器</p><ul><li>路由：<ul><li><strong>路由ID</strong>：唯一标识</li><li><strong>路由uri</strong>：路由到的服务地址</li></ul></li><li>断言：<strong>路由的规则</strong>，符合哪个规则去转发到哪个路由</li><li>过滤器：对响应和请求做处理</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line"><span class="comment">#############################新增网关配置###########################</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#开启从注册中心动态创建路由的功能，利用微服务名进行路由</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh</span> <span class="comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span></span><br><span class="line">          <span class="comment">#uri: http://localhost:8001          #匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://cloud-payment-service</span> <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/get/**</span>         <span class="comment"># 断言，路径相匹配的进行路由</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh2</span> <span class="comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span></span><br><span class="line">          <span class="comment">#uri: http://localhost:8001          #匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://cloud-payment-service</span> <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/lb/**</span>         <span class="comment"># 断言，路径相匹配的进行路由</span></span><br><span class="line"><span class="comment">####################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">cloud-gateway-service</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment">#服务提供者provider注册进eureka服务列表内</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-2、网关路由的流程"><a href="#7-2、网关路由的流程" class="headerlink" title="7.2、网关路由的流程"></a>7.2、网关路由的流程</h3><ol><li>请求发送到网关</li><li>网关根据路由的断言进行匹配</li><li>从注册中心拉取服务信息，找到对应的服务</li><li>进行转发</li></ol><h3 id="7-3、断言工厂"><a href="#7-3、断言工厂" class="headerlink" title="7.3、断言工厂"></a>7.3、断言工厂</h3><p>Spring Cloud Gateway包括许多内置的Route Predicate工厂。所有这些Predicate都与HTTP请求的不同属性匹配。多个RoutePredicate工厂可以进行组合。</p><p>Spring Cloud Gateway创建Route 对象时，使用RoutePredicateFactory 创建 Predicate对象，Predicate 对象可以赋值给Route。Spring Cloud Gateway包含许多内置的Route Predicate Factories。</p><p>所有这些谓词都匹配HTTP请求的不同属性。多种谓词工厂可以组合，并通过逻辑and。</p><p>Path&#x3D;&#x2F;consumers&#x2F;** 是按照路径匹配，这个规则是由<code>PathRoutePredicateFactory</code>类来处理的</p><h3 id="7-4、过滤器"><a href="#7-4、过滤器" class="headerlink" title="7.4、过滤器"></a>7.4、过滤器</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> </span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://userservice</span> </span><br><span class="line">        <span class="attr">predicates:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/user/**</span></span><br><span class="line">      <span class="attr">default-filters:</span> <span class="comment"># 默认过滤项</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AddRequestHeader=user,</span> <span class="string">admin</span> <span class="comment">#请求头，值</span></span><br></pre></td></tr></table></figure><p>全局过滤器</p><p>全局过滤器的作用也是<strong>处理一切进入网关的请求和微服务响应</strong>，与GatewayFilter的作用一样。区别在于GatewayFilter通过配置定义，处理逻辑是固定的；而GlobalFilter的逻辑需要自己写代码实现。</p><p><strong>定义方式是实现</strong><code>**GlobalFilter**</code><strong>和</strong><code>Ordered（拦截器顺序）</code><strong>接口。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Order(-1)</span> <span class="comment">// 拦截器顺序</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizeFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.获取请求参数</span></span><br><span class="line">        MultiValueMap&lt;String, String&gt; params = exchange.getRequest().getQueryParams();</span><br><span class="line">        <span class="comment">// 2.获取authorization参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">auth</span> <span class="operator">=</span> params.getFirst(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="comment">// 3.校验</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(auth)) &#123;</span><br><span class="line">            <span class="comment">// 放行</span></span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.拦截</span></span><br><span class="line">        <span class="comment">// 4.1.禁止访问，设置状态码</span></span><br><span class="line">        exchange.getResponse().setStatusCode(HttpStatus.FORBIDDEN);</span><br><span class="line">        <span class="comment">// 4.2.结束处理</span></span><br><span class="line">        <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤器的顺序</p><p>请求进入网关会碰到三类过滤器：当前路由的过滤器、DefaultFilter、GlobalFilter</p><p>请求路由后，会将当前路由过滤器和DefaultFilter、GlobalFilter，合并到一个过滤器链（集合）中，排序后依次执行每个过滤器：</p><p>排序的规则是什么呢？</p><ul><li>每一个过滤器都必须指定一个int类型的order值，<strong>order值越小，优先级越高，执行顺序越靠前</strong>。</li><li>GlobalFilter<strong>通过实现Ordered接口，或者添加@Order注解来指定order值</strong>，由我们自己指定</li><li>路由过滤器和defaultFilter的order由Spring指定，默认是按照声明顺序从1递增。</li><li>当过滤器的order值一样时，会按照 <strong>defaultFilter &gt; 路由过滤器 &gt; GlobalFilter</strong>的顺序执行。</li></ul><h3 id="7-5、gateway跨域"><a href="#7-5、gateway跨域" class="headerlink" title="7.5、gateway跨域"></a>7.5、gateway跨域</h3><p>两种方式</p><ul><li>方式一：yml</li><li>方式二：config</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="comment"># 。。。</span></span><br><span class="line">      <span class="attr">globalcors:</span> <span class="comment"># 全局的跨域处理</span></span><br><span class="line">        <span class="attr">add-to-simple-url-handler-mapping:</span> <span class="literal">true</span> <span class="comment"># 解决options请求被拦截问题</span></span><br><span class="line">        <span class="attr">corsConfigurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span> <span class="comment"># 允许哪些网站的跨域请求 </span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;http://localhost:8090&quot;</span></span><br><span class="line">            <span class="attr">allowedMethods:</span> <span class="comment"># 允许的跨域ajax的请求方式</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;GET&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;POST&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;DELETE&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;PUT&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;OPTIONS&quot;</span></span><br><span class="line">            <span class="attr">allowedHeaders:</span> <span class="string">&quot;*&quot;</span> <span class="comment"># 允许在请求中携带的头信息</span></span><br><span class="line">            <span class="attr">allowCredentials:</span> <span class="literal">true</span> <span class="comment"># 是否允许携带cookie</span></span><br><span class="line">            <span class="attr">maxAge:</span> <span class="number">360000</span> <span class="comment"># 这次跨域检测的有效期</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">// gateway</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">// 添加过滤器</span></span><br><span class="line">    <span class="keyword">public</span> CorsWebFilter <span class="title function_">corsWebFilter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 基于url跨域，选择reactive包下的</span></span><br><span class="line">        UrlBasedCorsConfigurationSource source=<span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        <span class="comment">// 跨域配置信息</span></span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">corsConfiguration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        <span class="comment">// 允许跨域的头</span></span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 允许跨域的请求方式</span></span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 允许跨域的请求来源</span></span><br><span class="line">        corsConfiguration.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 是否允许携带cookie跨域</span></span><br><span class="line">        corsConfiguration.setAllowCredentials(<span class="literal">true</span>);</span><br><span class="line">        </span><br><span class="line">       <span class="comment">// 任意url都要进行跨域配置</span></span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>,corsConfiguration);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsWebFilter</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue进阶</title>
      <link href="/blog/2019/10/23/Vue%E9%AB%98%E7%BA%A7/"/>
      <url>/blog/2019/10/23/Vue%E9%AB%98%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="1、vue脚手架"><a href="#1、vue脚手架" class="headerlink" title="1、vue脚手架"></a>1、vue脚手架</h2><p>Vue 脚手架是 Vue 官方提供的标准化开发工具（开发平台）</p><h3 id="1-1、步骤"><a href="#1-1、步骤" class="headerlink" title="1.1、步骤"></a>1.1、步骤</h3><p>淘宝镜像:</p><p>npm config set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p><h4 id="第一步（仅第一次执行）：全局安装-vue-x2F-cli。"><a href="#第一步（仅第一次执行）：全局安装-vue-x2F-cli。" class="headerlink" title="第一步（仅第一次执行）：全局安装@vue&#x2F;cli。"></a>第一步（仅第一次执行）：全局安装@vue&#x2F;cli。</h4><p><code>npm install -g @vue/cli</code></p><h4 id="第二步：切换到你要创建项目的目录，然后使用命令创建项目"><a href="#第二步：切换到你要创建项目的目录，然后使用命令创建项目" class="headerlink" title="第二步：切换到你要创建项目的目录，然后使用命令创建项目"></a>第二步：切换到你要创建项目的目录，然后使用命令创建项目</h4><p><code>vue create xxxx</code> : (xxxx是项目名称)</p><h4 id="第三步：进入到项目目录-启动项目"><a href="#第三步：进入到项目目录-启动项目" class="headerlink" title="第三步：进入到项目目录 , 启动项目"></a>第三步：进入到项目目录 , 启动项目</h4><p>npm run serve</p><h3 id="1-2、脚手架文件结构"><a href="#1-2、脚手架文件结构" class="headerlink" title="1.2、脚手架文件结构"></a>1.2、脚手架文件结构</h3><p>├── node_modules<br>├── public<br>│ ├── favicon.ico: 页签图标<br>│ └── index.html: 主页面<br>├── src<br>│ ├── assets: 存放静态资源<br>│ │ └── logo.png<br>│ │── component: 存放组件<br>│ │ └── HelloWorld.vue<br>│ │── App.vue: 汇总所有组件<br>│ │── main.js: 入口文件<br>├── .gitignore: git版本管制忽略的配置<br>├── babel.config.js: babel的配置文件<br>├── package.json: 应用包配置文件<br>├── README.md: 应用描述文件<br>├── package-lock.json：包版本控制文件</p><h3 id="1-3、vue脚手架的运行流程"><a href="#1-3、vue脚手架的运行流程" class="headerlink" title="1.3、vue脚手架的运行流程"></a>1.3、vue脚手架的运行流程</h3><p>通过main.js 把vue.app渲染到index.html指定区域中</p><h3 id="1-4、vue-js与vue-runtime-xxx-js的区别："><a href="#1-4、vue-js与vue-runtime-xxx-js的区别：" class="headerlink" title="1.4、vue.js与vue.runtime.xxx.js的区别："></a>1.4、vue.js与vue.runtime.xxx.js的区别：</h3><ol><li><p>vue.js是完整版的Vue，包含：核心功能 + 模板解析器。</p></li><li><p>vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模板解析器。</p></li><li><p>因为vue.runtime.xxx.js没有模板解析器，所以不能使用template这个配置项，需要使用render函数接收到的createElement函数去指定具体内容。</p></li></ol><p>vue全局配置(可选)</p><p>官网地址: <a href="https://cli.vuejs.org/zh/config/#%E5%85%A8%E5%B1%80-cli-%E9%85%8D%E7%BD%AE">https://cli.vuejs.org/zh/config/#%E5%85%A8%E5%B1%80-cli-%E9%85%8D%E7%BD%AE</a></p><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><p>被用来给元素或子组件注册引用信息（id的替代者）</p><p>应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）</p><p>使用方式：</p><p>打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1&gt;</code>或 <code>&lt;demo ref=&quot;xxx&quot;&gt;&lt;/demo&gt;</code></p><p>获取：<code>this.$refs.xxx</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HelloWorld&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;captcha&quot;</span>  <span class="attr">ref</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeText&quot;</span>&gt;</span>change word<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123; </span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//添加一个方法</span></span><br><span class="line">     <span class="attr">methods</span>:&#123;</span><br><span class="line">  <span class="comment">//改变文字</span></span><br><span class="line">  changeText () &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">text</span>.<span class="property">value</span> = <span class="string">&#x27;Hello Vue!&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2、组件间传值"><a href="#2、组件间传值" class="headerlink" title="2、组件间传值"></a>2、组件间传值</h2><h3 id="2-1、父–-gt-子"><a href="#2-1、父–-gt-子" class="headerlink" title="2.1、父–&gt;子"></a>2.1、父–&gt;子</h3><p><strong>子组件用props接收</strong></p><h4 id="①-props功能"><a href="#①-props功能" class="headerlink" title="① props功能"></a>① props功能</h4><p>子组件用<strong>props</strong>来接收父组件传递过来的数据</p><h4 id="②-父组件传递数据方式"><a href="#②-父组件传递数据方式" class="headerlink" title="② 父组件传递数据方式"></a>② 父组件传递数据方式</h4><p><strong>在子标签中，用绑定属性的方式进行传递</strong></p><p>&lt;子组件 数据1&#x3D;…, 数据2&#x3D;…&gt;&lt;子组件&gt;</p><h4 id="③-子组件接收数据"><a href="#③-子组件接收数据" class="headerlink" title="③ 子组件接收数据"></a>③ 子组件接收数据</h4><ul><li>方式1 : props:[‘name’,’age’]</li><li>方式2 (限制数据类型) : props:{name:S tring,age:Number}</li><li>方式3（限制类型、限制必要性、指定默认值)</li></ul><p>例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>父组件传递过来的name为: &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>父组件传递过来的age为: &#123;&#123;showAge&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>:<span class="string">&#x27;ChildDemo&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">props</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>:<span class="title class_">String</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">age</span>:<span class="title class_">Number</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">showAge</span>:<span class="variable language_">this</span>.<span class="property">age</span>+<span class="number">1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">child-demo</span> <span class="attr">:name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">:age</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child-demo</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ChildDemo</span> <span class="keyword">from</span> <span class="string">&quot;../components/ChildDemo&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;FatherDemo&quot;</span>,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">ChildDemo</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">99</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="传递静态或动态数据"><a href="#传递静态或动态数据" class="headerlink" title="传递静态或动态数据"></a>传递静态或动态数据</h3><p>传入动态可用<code>v-bind</code>进行绑定</p><p>如果是数字类型也可用v-bind进行转换类型 (见上案例)</p><h3 id="2-2、子-–-gt-父"><a href="#2-2、子-–-gt-父" class="headerlink" title="2.2、子 –&gt;父"></a>2.2、子 –&gt;父</h3><p>子组件向父组件共享数据</p><p>通过自定义事件实现子向父共享数据</p><p>步骤</p><ol><li>子组件定义方法，调用<code>this.$emit(&#39;父组件的自定义事件&#39;，要共享的数据)</code></li><li>父组件自定义事件来接收</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;chuandi($event)&quot;</span>&gt;</span>给父组件传递<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> user = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">id</span>: <span class="string">&quot;01&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;zhangsan&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">age</span>: <span class="number">99</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;ChildDemo&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      user,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">chuandi</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;fun&quot;</span>, <span class="variable language_">this</span>.<span class="property">user</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ChildDemo</span> @<span class="attr">fun</span>=<span class="string">&quot;chuandi($event)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ChildDemo</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; user &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">ChildDemo</span> <span class="keyword">from</span> <span class="string">&quot;../components/ChildDemo&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123; <span class="title class_">ChildDemo</span> &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">user</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">chuandi</span>(<span class="params">data</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">user</span> = data;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3、全局事件总线"><a href="#3、全局事件总线" class="headerlink" title="3、全局事件总线"></a>3、全局事件总线</h2><h3 id="3-1、全局事件总线（GlobalEventBus）"><a href="#3-1、全局事件总线（GlobalEventBus）" class="headerlink" title="3.1、全局事件总线（GlobalEventBus）"></a>3.1、全局事件总线（GlobalEventBus）</h3><p>一种组件间通讯方式，<strong>适用于任意组件的数据共享</strong></p><h3 id="3-2、安装全局时间总线"><a href="#3-2、安装全局时间总线" class="headerlink" title="3.2、安装全局时间总线"></a>3.2、安装全局时间总线</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入App</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">//关闭Vue的生产提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line"><span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span> <span class="comment">//安装全局事件总线</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-3、使用"><a href="#3-3、使用" class="headerlink" title="3.3、使用"></a>3.3、使用</h3><ol><li>发送消息：<code>this.$bus.$emit(messageName,date)</code></li><li>接收消息：<code>this.$bus.$on(messageName,function()&#123;&#125;)</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生性别：&#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sendStudentName&quot;</span>&gt;</span>把学生名给School组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">name</span>:<span class="string">&#x27;Student&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(&#x27;Student&#x27;,this.x)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">sendStudentName</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="comment">//发送消息</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">this</span>.<span class="property">$bus</span>.$emit(<span class="string">&#x27;hello&#x27;</span>,<span class="variable language_">this</span>.<span class="property">name</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.student</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="attribute">background-color</span>: pink;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="attribute">padding</span>: <span class="number">5px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="attribute">margin-top</span>: <span class="number">30px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;school&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校名称：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址：&#123;&#123;address&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">name</span>:<span class="string">&#x27;School&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">address</span>:<span class="string">&#x27;北京&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(&#x27;School&#x27;,this)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 接收消息</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;hello&#x27;</span>,<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是School组件，收到了数据&#x27;</span>,data)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">this</span>.<span class="property">$bus</span>.$off(<span class="string">&#x27;hello&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.school</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="attribute">background-color</span>: skyblue;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="attribute">padding</span>: <span class="number">5px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="4、动态绑定组件及组件缓存"><a href="#4、动态绑定组件及组件缓存" class="headerlink" title="4、动态绑定组件及组件缓存"></a>4、动态绑定组件及组件缓存</h2><h3 id="4-1、绑定组件"><a href="#4-1、绑定组件" class="headerlink" title="4.1、绑定组件"></a>4.1、绑定组件</h3><ul><li><pre><code>使用 `&lt;component is=&quot;组件名&quot;&gt;&lt;/component&gt;`</code></pre>  component为内置组件，使用 is &#x3D; “组件名”，就会自动去找匹配的组件（即is的值写的是哪个组件，component就代表的是哪个组件）想要改变挂载的组件，只需要修改is对应的值即可</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;example&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;change&quot;</span>&gt;</span>切换页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;currentView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-2、缓存组件"><a href="#4-2、缓存组件" class="headerlink" title="4.2、缓存组件"></a>4.2、缓存组件</h3><p><code>&lt;keep-alive&gt;</code> 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。和 <code>&lt;transition&gt; </code>相似，<code>&lt;keep-alive&gt;</code> 是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在父组件链中</p><p>属性include&#x3D;”组件名“ ：要哪个组件保持活跃，不被销毁</p><p>如：<code>&lt;keep-alive include=&quot;Demo&quot;&gt;&lt;keep-alive&gt;</code>表示让不销毁Demo组件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;example&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;change&quot;</span>&gt;</span>切换页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;currentView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="5、跨域"><a href="#5、跨域" class="headerlink" title="5、跨域"></a>5、跨域</h2><h3 id="使用deServer-proxy"><a href="#使用deServer-proxy" class="headerlink" title="使用deServer.proxy"></a>使用deServer.proxy</h3><p>官网地址：<a href="https://cli.vuejs.org/zh/config/#devserver">https://cli.vuejs.org/zh/config/#devserver</a></p><p>编写vue.config.js配置具体代理规则：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api1&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api1&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api1&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125; <span class="comment">// 替换</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/api2&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api2&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5001&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api2&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125; <span class="comment">// 替换</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span></span><br><span class="line"><span class="comment">   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080</span></span><br><span class="line"><span class="comment">   changeOrigin默认值为true</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注：匹配的请求路径要写在后端请求路径前</p><p>案例:请求地址为localhost5000</p><p>vue.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">  <span class="attr">proxy</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;/test&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/test&#x27;开头的请求路径</span></span><br><span class="line">      <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span>,<span class="comment">// 代理目标的基础路径,</span></span><br><span class="line">      <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">pathRewrite</span>: &#123; <span class="string">&#x27;^/test&#x27;</span>: <span class="string">&#x27;&#x27;</span> &#125; <span class="comment">// 替换</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">findAll</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">data</span>: data &#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(</span><br><span class="line">      <span class="string">&quot;http://localhost:8080/test/students&quot;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="6、Vuex"><a href="#6、Vuex" class="headerlink" title="6、Vuex"></a>6、Vuex</h2><p>集中式管理插件： <a href="https://vuex.vuejs.org/zh/">https://vuex.vuejs.org/zh/</a></p><p>![[vuex.png]]</p><p>vuex由3个部分组成：<strong>actions，mutations，state</strong></p><ul><li>state：管理共享数据</li><li>actions：值为一个对象，包含多个响应用户动作的回调函数，通过调用commit来触发mutations的方法，可以写异步代码，在组件中使用: <code>**$store.dispatch(&#39;对应的 action 回调名&#39;)**</code> 触发</li><li>mutations：值是一个对象，包含多个直接更新 state 的方法</li></ul><p><strong>actions，mutations，state</strong> 由 <strong>store</strong>来管理，调用方法时，用store来调用</p><p><strong>actions触发：</strong><code>this.$store.dispatch()</code></p><p><strong>mutations触发：</strong><code>this.$store.commit()</code></p><h3 id="6-1、vuex使用"><a href="#6-1、vuex使用" class="headerlink" title="6.1、vuex使用"></a>6.1、vuex使用</h3><p><strong>vue2中使用vuex3版本，vue3中使用vuex4版本</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save vuex@3</span><br></pre></td></tr></table></figure><p>src&#x2F;store&#x2F;index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在index.js中引入vue,并使用vue.use(vuex),防止报错</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// state，用于存储数据的地方</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mutations，修改你state的唯一手段</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备actions，书写自己的业务逻辑</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//理解为计算属性，对数据进行二次加工</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  actions,</span><br><span class="line">  mutations,</span><br><span class="line">  state，</span><br><span class="line">  getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在main中引入store，<strong>所有组件VC都会有$store属性，通过该属性操作共享数据</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="comment">// 注册仓库，组件实例会多一个$store的属性</span></span><br><span class="line">  store,</span><br><span class="line">  <span class="comment">// 省略。。。</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="6-2、流程"><a href="#6-2、流程" class="headerlink" title="6.2、流程"></a>6.2、流程</h3><ol><li>在组件中调用<code>this.$store.dispatch(&#39;方法名&#39;,参数)</code>进入actions方法中，或者调用<code>this.$store.commit(&#39;方法名&#39;,参数)</code>进入mutations中</li><li>mutations用来操作state数据</li><li>getters可以理解为计算属性</li></ol><p><strong>actions–&gt;mutations–&gt;state</strong></p><p>组件vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过 $store.state.*** 来获取vuex中的共享数据</span></span><br><span class="line"></span><br><span class="line">&lt;h2&gt;&#123;&#123; $store.<span class="property">state</span>.<span class="property">count</span> &#125;&#125;&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  通过$store.dispatch调用actions对应的方法中</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">jia</span>(<span class="params"></span>) &#123; </span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;jia&#x27;</span>,<span class="number">1</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>store&#x2F;index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="title function_">jia</span>(<span class="params">context,val</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;actions...run...&#x27;</span>);</span><br><span class="line">        <span class="comment">// 这里‘JIA’一般为大写，调用的是mutations的方法</span></span><br><span class="line">        context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>,val)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="title function_">JIA</span>(<span class="params">state,val</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mutations...run...&#x27;</span>,state,val);</span><br><span class="line">        state.<span class="property">count</span> +=val</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    <span class="attr">count</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3、4个map方法的使用"><a href="#6-3、4个map方法的使用" class="headerlink" title="6.3、4个map方法的使用"></a>6.3、4个map方法的使用</h3><p><strong>mapState方法：</strong>用于帮助我们映射state中的数据为计算属性，包含了$store.state.***</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（对象写法）</span></span><br><span class="line">     ...<span class="title function_">mapState</span>(&#123;<span class="attr">sum</span>:<span class="string">&#x27;sum&#x27;</span>,<span class="attr">school</span>:<span class="string">&#x27;school&#x27;</span>,<span class="attr">subject</span>:<span class="string">&#x27;subject&#x27;</span>&#125;),</span><br><span class="line">         </span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><strong>mapGetters方法：</strong>用于帮助我们映射getters中的数据为计算属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（对象写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>(&#123;<span class="attr">bigSum</span>:<span class="string">&#x27;bigSum&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;bigSum&#x27;</span>])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><strong>mapActions方法：</strong>用于帮助我们生成与actions对话的方法，即：包含$store.dispatch(xxx)的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>(&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="string">&#x27;jiaWait&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>mapMutations方法：</strong>用于帮助我们生成与mutations对话的方法，即：包含$store.commit(xxx)的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：increment、decrement（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>(&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;JIA&#x27;</span>,<span class="string">&#x27;JIAN&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-4、vuex模块化和命名空间"><a href="#6-4、vuex模块化和命名空间" class="headerlink" title="6.4、vuex模块化和命名空间"></a>6.4、vuex模块化和命名空间</h3><p>目的：让代码更好维护，让多种数据分类更加明确。</p><ol><li>namespaced:true,&#x2F;&#x2F;开启命名空间</li><li>分类配置相关数据及方法</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> countAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    countAbout,</span><br><span class="line">    personAbout</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="1、开启命名空间后，组件中读取state数据："><a href="#1、开启命名空间后，组件中读取state数据：" class="headerlink" title="1、开启命名空间后，组件中读取state数据："></a>1、开启命名空间后，组件中读取state数据：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">personAbout</span>.<span class="property">list</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二：借助mapState读取：</span></span><br><span class="line">...<span class="title function_">mapState</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br></pre></td></tr></table></figure><h3 id="2、开启命名空间后，组件中读取getters数据"><a href="#2、开启命名空间后，组件中读取getters数据" class="headerlink" title="2、开启命名空间后，组件中读取getters数据"></a>2、开启命名空间后，组件中读取getters数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;personAbout/firstPersonName&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二：借助mapGetters读取：</span></span><br><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;bigSum&#x27;</span>])</span><br></pre></td></tr></table></figure><h3 id="3、开启命名空间后，组件中调用dispatch"><a href="#3、开启命名空间后，组件中调用dispatch" class="headerlink" title="3、开启命名空间后，组件中调用dispatch"></a>3、开启命名空间后，组件中调用dispatch</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接dispatch</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;personAbout/addPersonWang&#x27;</span>,person)</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二：借助mapActions：</span></span><br><span class="line">...<span class="title function_">mapActions</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="4、开启命名空间后，组件中调用commit"><a href="#4、开启命名空间后，组件中调用commit" class="headerlink" title="4、开启命名空间后，组件中调用commit"></a>4、开启命名空间后，组件中调用commit</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接commit</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二：借助mapMutations：</span></span><br><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br></pre></td></tr></table></figure><h2 id="7、路由：地址和组件的键值对"><a href="#7、路由：地址和组件的键值对" class="headerlink" title="7、路由：地址和组件的键值对"></a>7、路由：地址和组件的键值对</h2><h3 id="7-1、基本路由"><a href="#7-1、基本路由" class="headerlink" title="7.1、基本路由"></a>7.1、基本路由</h3><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol><li>npm i vue-router</li><li>创建src&#x2F;router&#x2F;main.js 文件</li><li>导入vue-router ：import VueRouter from ‘vue-router’</li><li>使用插件：vue.use(VueRouter)</li><li>创建router对象并暴露</li><li>src&#x2F;main.js 注册路由，并添加到vue实例中</li></ol><p>router&#x2F;main.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">   </span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><p>src&#x2F;main.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/main&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">  router</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="路由规则"><a href="#路由规则" class="headerlink" title="路由规则"></a>路由规则</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>, <span class="attr">component</span>: <span class="title class_">About</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/test&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Test</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>router-link：导航，相当于<code>&lt;a&gt;</code>标签 <code>&lt;router-link to=&quot;/demo&quot;&gt;</code></li><li>to：的值对应路由地址</li></ul><p>router-view：显示对应的组件</p><p>redirect：重定向</p><p>注意：</p><ol><li>路由组件通常存放在pages文件夹，一般组件通常存放在components文件夹。</li><li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li><li>每个组件都有自己的$route属性，里面存储着自己的路由信息。</li><li>整个应用只有一个router，可以通过组件的$router属性获取到。</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2382781/1645169649495-c4a3f9e2-15d6-4494-89cf-d1a25eddc117.png"></p><h3 id="7-2、多级路由（嵌套路由）"><a href="#7-2、多级路由（嵌套路由）" class="headerlink" title="7.2、多级路由（嵌套路由）"></a>7.2、多级路由（嵌套路由）</h3><p>路由的规则用children 配置项</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">About</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line"><span class="attr">children</span>:[ <span class="comment">//通过children配置子级路由</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>, <span class="comment">//此处一定不要写：/news</span></span><br><span class="line"><span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,<span class="comment">//此处一定不要写：/message</span></span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Message</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p> 跳转时要写完整的路径</p><p><code>&lt;router-link to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;</code></p><h4 id="命名路由（name）"><a href="#命名路由（name）" class="headerlink" title="命名路由（name）"></a>命名路由（name）</h4><p>给路由起名，简化路由的跳转</p><h4 id="给路由命名，添加name属性"><a href="#给路由命名，添加name属性" class="headerlink" title="给路由命名，添加name属性"></a>给路由命名，添加name属性</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/demo&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Demo</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;test&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Test</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line">         <span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span> <span class="comment">//给路由命名</span></span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;welcome&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Hello</span>,</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用name进行跳转"><a href="#使用name进行跳转" class="headerlink" title="使用name进行跳转"></a>使用name进行跳转</h4><!--简化前，需要写完整的路径 --><p><code>&lt;router-link to=&quot;/demo/test/welcome&quot;&gt;跳转&lt;/router-link&gt;</code></p><!--简化后，直接通过名字跳转 --><p><code>&lt;router-link :to=&quot;&#123;name:&#39;hello&#39;&#125;&quot;&gt;跳转&lt;/router-link&gt;</code></p><!--简化写法配合传递参数 --><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link </span><br><span class="line">:to=<span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">name:&#x27;hello&#x27;,</span></span><br><span class="line"><span class="string">query:&#123;</span></span><br><span class="line"><span class="string">   id:666,</span></span><br><span class="line"><span class="string">            title:&#x27;你好&#x27;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;&quot;</span></span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><h3 id="7-3、动态路由"><a href="#7-3、动态路由" class="headerlink" title="7.3、动态路由"></a>7.3、动态路由</h3><p>如：有一个user组件，对所有的用户进行渲染。</p><p>user&#x2F;zhangsan</p><p>user&#x2F;lisi</p><p>user&#x2F;wangwu</p><p>这样的url会映射到同一个路由。</p><p><strong>动态路由以冒号开始“ : ”，开启props属性</strong></p><p><strong>组件用props[] 接收</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">第一种写法：</span><br><span class="line">&#123; <span class="attr">path</span>: <span class="string">&#x27;/user/:name&#x27;</span>, <span class="attr">component</span>: user, <span class="attr">props</span>: <span class="literal">true</span> &#125;</span><br><span class="line"></span><br><span class="line">第二种写法：</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/user/:name&#x27;</span>, <span class="attr">component</span>: user, <span class="comment">//props:true</span></span><br><span class="line">            <span class="title function_">props</span>(<span class="params">router</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123; <span class="attr">name</span>: router.<span class="property">params</span>.<span class="property">name</span> &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>取值：<code>this.$route.params</code></p><h3 id="7-4、编程式导航"><a href="#7-4、编程式导航" class="headerlink" title="7.4、编程式导航"></a>7.4、编程式导航</h3><p>this.$router是导航对象，提供了一些api</p><ul><li>this.$router.push(‘地址’)：跳转到指定得地址，会留下历史记录</li><li>this.$router.replace(‘地址’)：跳转到指定地址，会替换历史记录</li><li>this.$router.go(数值 n)：前进或者后退（不用）</li></ul><p>this.$router.beck()：后退</p><p>this.$router.forward()：前进</p><pre><code>&lt;button @click=&quot;$router.back()&quot;&gt;beck&lt;/button&gt;&lt;button @click=&quot;$router.forward()&quot;&gt;forward&lt;/button&gt;</code></pre><h3 id="7-5、路由守卫（权限）"><a href="#7-5、路由守卫（权限）" class="headerlink" title="7.5、路由守卫（权限）"></a>7.5、路由守卫（权限）</h3><h4 id="全局前置守卫"><a href="#全局前置守卫" class="headerlink" title="全局前置守卫"></a>全局前置守卫</h4><p>每次发生跳转时，都会触发全局前置守卫，通过前置首尾来进行权限控制</p><h4 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h4><p>调用router实例得<code>beforeEach（fun）</code>方法，开启前置守卫</p><p>const router &#x3D; new VueRouter({…})</p><p>router.beforeEach(fun)</p><h4 id="fun回调函数得3个参数："><a href="#fun回调函数得3个参数：" class="headerlink" title="fun回调函数得3个参数："></a>fun回调函数得3个参数：</h4><ol><li>to：将要访问得路由信息对象</li><li>from：要离开得路由得信息对象</li><li>next：是一个函数，调用next（）表示放行</li></ol><p>to、from都是路由对象信息：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2382781/1645232430165-5b22a2ae-a736-44a0-a067-b3741e431977.png"></p><h4 id="路由元信息：meta"><a href="#路由元信息：meta" class="headerlink" title="路由元信息：meta"></a>路由元信息：meta</h4><p>meta：路由元信息，可以存放程序员自定义的</p><p>如存放是否需要权限验证：meta：｛isAuth：false｝</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: user, <span class="attr">path</span>: <span class="string">&#x27;/user/:name&#x27;</span>, <span class="attr">component</span>: user, <span class="comment">//props:true</span></span><br><span class="line">          <span class="comment">// 是否需要权限验证</span></span><br><span class="line">            <span class="attr">meta</span>: &#123; <span class="attr">isAuth</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">            <span class="title function_">props</span>(<span class="params">router</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123; <span class="attr">name</span>: router.<span class="property">params</span>.<span class="property">name</span> &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(to);</span><br><span class="line">  <span class="comment">// 目标路由是否需要权限验证</span></span><br><span class="line">    <span class="keyword">if</span> (!to.<span class="property">meta</span>.<span class="property">isAuth</span>) &#123;</span><br><span class="line">        <span class="comment">//console.log(&#x27;没权限&#x27;);</span></span><br><span class="line">        <span class="comment">//next();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue基础</title>
      <link href="/blog/2019/07/19/Vue%E5%9F%BA%E7%A1%80/"/>
      <url>/blog/2019/07/19/Vue%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="1、vue的基本使用"><a href="#1、vue的基本使用" class="headerlink" title="1、vue的基本使用"></a>1、vue的基本使用</h2><p>1.导入vue的库文件,vue.js<br>2.创建容器<br>3.创建vue实例</p><ul><li>el:接管的<strong>容器</strong></li><li>data:页面所展示的<strong>数据</strong></li></ul><blockquote><p>注意:只一个容器只能对应一个vue实例</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 创建容器 --&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 创建vue实例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">el</span>: <span class="string">&#x27;.root&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">msg</span>: <span class="string">&#x27;vue的基本使用&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>第二种写法：<code>vm.$mount()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">msg</span>: <span class="string">&#x27;vue的基本使用&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// vm.$mount() 手动地挂载一个未挂载的实例。 等同与&#x27;el&#x27;</span></span><br><span class="line">    &#125;).$mount(<span class="string">&#x27;.root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="2、内容渲染"><a href="#2、内容渲染" class="headerlink" title="2、内容渲染"></a>2、内容渲染</h2><h3 id="2-1、指令的分类"><a href="#2-1、指令的分类" class="headerlink" title="2.1、指令的分类"></a>2.1、指令的分类</h3><ul><li>内容渲染</li><li>属性绑定</li><li>事件绑定</li><li>双向绑定</li><li>条件渲染</li><li>列表渲染</li></ul><h3 id="2-2、内容渲染指令"><a href="#2-2、内容渲染指令" class="headerlink" title="2.2、内容渲染指令"></a>2.2、内容渲染指令</h3><p>渲染DOM元素的文本内容</p><ul><li><code>v-text</code>: 覆盖标签原本的内容</li><li><code>&#123;&#123; &#125;&#125; (插值语法)</code> : 放在标签内</li><li><code>v-html</code>: 渲染带标签的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;msgText&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&quot;htmlMsg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">el</span>: <span class="string">&#x27;.root&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">msgText</span>: <span class="string">&#x27;msgText&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">msg</span>: <span class="string">&#x27;msg&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">htmlMsg</span>: <span class="string">&#x27;&lt;h5&gt;htmlMsg&lt;/h5&gt;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="3、数据绑定"><a href="#3、数据绑定" class="headerlink" title="3、数据绑定"></a>3、数据绑定</h2><h3 id="3-1、单项数据绑定（v-bind）"><a href="#3-1、单项数据绑定（v-bind）" class="headerlink" title="3.1、单项数据绑定（v-bind）"></a>3.1、单项数据绑定（v-bind）</h3><ul><li><p><code>v-bind</code></p></li><li><p>可绑定元素属性</p></li><li><p>可绑定数据</p></li><li><p><code>v-bind:属性=&quot;属性值&quot;</code> 简写 <code>:属性=&quot;属性值&quot;</code></p></li></ul><p><strong>当js表达式去执行</strong></p><p>例：绑定<code>a便签的herf</code>属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>v-bind动态绑定属性<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 标准写法 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>baidu<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 简写 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>baidu<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">el</span>: <span class="string">&#x27;.root&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">url</span>: <span class="string">&#x27;http://www.baidu.com&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>例：绑定值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;v-bind 绑定数据&lt;/span&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; disabled=&quot;true&quot; :value=&quot;name&quot;&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure><h3 id="3-2、双向绑定数据（v-model）"><a href="#3-2、双向绑定数据（v-model）" class="headerlink" title="3.2、双向绑定数据（v-model）"></a>3.2、双向绑定数据（v-model）</h3><ul><li>data数据流向页面，页面也流向data数据</li><li><strong>用于获取表单数据</strong></li><li>v-model：value&#x3D;”name” 简写 v-model&#x3D;”name”</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;name&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="①-v-model修饰符"><a href="#①-v-model修饰符" class="headerlink" title="① v-model修饰符"></a>① v-model修饰符</h4><ul><li>lazy：失去焦点再收集数据 <code>&lt;inputtype=&quot;text&quot;v-model.lazy=&quot;msg&quot;&gt;</code></li><li>number：输入字符串转为number <code>&lt;inputtype=&quot;text&quot;v-model.number=&quot;num.x&quot;&gt;</code></li><li>trim：去除首尾空格 <code>&lt;inputtype=&quot;text&quot;v-model.trim=&quot;msg&quot;&gt;</code></li></ul><h2 id="4、事件绑定-v-on-x2F"><a href="#4、事件绑定-v-on-x2F" class="headerlink" title="4、事件绑定(v-on&#x2F;@)"></a>4、事件绑定(v-on&#x2F;@)</h2><ul><li><code>v-on</code> 来绑定事件</li><li><code>v-on</code>可以简写成<code>@</code> ，如：v-on:click &#x3D;&#x3D;&gt; @click</li><li>事件函数定义到vue对象的<code>method</code>中,最终会在vm对象上；</li><li>methods中配置的函数，不要用箭头函数！否则this就不是vm了,而是windows；</li><li>@click&#x3D;”demo” 和 @click&#x3D;”demo($event)” 效果一致，但后者可以传参；</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 标准写法 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;add()&quot;</span>&gt;</span>点我+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 简写 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add()&quot;</span>&gt;</span>点我+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">el</span>: <span class="string">&#x27;.root&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">num</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">add</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">num</span>++</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="4-1、事件对象-event"><a href="#4-1、事件对象-event" class="headerlink" title="4.1、事件对象$event"></a>4.1、事件对象$event</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=<span class="string">&quot;show($event)&quot;</span> &gt;anniu&lt;/button&gt;</span><br></pre></td></tr></table></figure><h3 id="4-2、事件修饰符"><a href="#4-2、事件修饰符" class="headerlink" title="4.2、事件修饰符"></a>4.2、事件修饰符</h3><p>Vue中的事件修饰符：</p><p><strong>1.prevent：阻止默认事件（常用）；</strong></p><p><strong>2.stop：阻止事件冒泡（常用）；</strong></p><p><strong>3.once：事件只触发一次（常用）；</strong></p><p>4.capture：使用事件的捕获模式；</p><p>5.self：只有event.target是当前操作的元素时才触发事件；</p><p>6.passive：事件的默认行为立即执行，无需等待事件回调执行完毕；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line">    &lt;!-- 阻止默认行为 --&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;show()&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>baidu<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;br&gt;</span><br><span class="line">    &lt;!-- 执行一次 --&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;showTc()&quot;</span>&gt;</span>弹窗执行一次<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    &lt;!-- 冒泡 --&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;showTc()&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;showTc()&quot;</span>&gt;</span>冒泡<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="4-3、键盘事件按键修饰符"><a href="#4-3、键盘事件按键修饰符" class="headerlink" title="4.3、键盘事件按键修饰符"></a>4.3、键盘事件按键修饰符</h3><p>1.Vue中常用的按键别名：</p><ul><li>回车 &#x3D;&gt; enter</li><li>删除 &#x3D;&gt; delete (捕获“删除”和“退格”键)</li><li>退出 &#x3D;&gt; esc</li><li>空格 &#x3D;&gt; space</li><li>换行 &#x3D;&gt; tab (特殊，必须配合keydown去使用)</li><li>上 &#x3D;&gt; up</li><li>下 &#x3D;&gt; down</li><li>左 &#x3D;&gt; left</li><li>右 &#x3D;&gt; right</li></ul><p>2.Vue未提供别名的按键，可以使用按键原始的key值去绑定，但注意要转为kebab-case（短横线命名）<br>3.系统修饰键（用法特殊）：ctrl、alt、shift、meta<br>    (1).配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发。<br>    (2).配合keydown使用：正常触发事件。<br>4.也可以使用keyCode去指定具体的按键（不推荐）<br>5.Vue.config.keyCodes.自定义键名 &#x3D; 键码，可以去定制按键别名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> placeholder=<span class="string">&quot;...&quot;</span> @keydown.<span class="property">enter</span>=<span class="string">&quot;show($event)&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="5、条件渲染-v-if-x2F-v-show"><a href="#5、条件渲染-v-if-x2F-v-show" class="headerlink" title="5、条件渲染(v-if&#x2F;v-show)"></a>5、条件渲染(v-if&#x2F;v-show)</h2><p>true显示，false隐藏</p><ul><li><p><code>v-if</code></p></li><li><p>false：元素标签直接被移除</p></li><li><p>适用于切换频率较低的场景</p></li><li><p><code>v-show</code>：</p></li><li><p>false：隐藏标签 <code>dispaly：none</code></p></li><li><p>适用于切换频率较高的场景</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;span v-show=<span class="string">&quot;true&quot;</span>&gt;v-<span class="keyword">if</span>&lt;/span&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">&quot;false&quot;</span>&gt;</span>v-show<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="6、列表渲染-v-for"><a href="#6、列表渲染-v-for" class="headerlink" title="6、列表渲染( v-for)"></a>6、列表渲染( v-for)</h2><p>语法：<code>v-for=&quot;(item, index) in xxx&quot; :key=&quot;yyy&quot;</code></p><p>可遍历：数组、对象、字符串（用的很少）、指定次数（用的很少）</p><ul><li>数组: (item, index)</li><li>对象: (value, key)</li><li>字符串：(char, index)</li><li>数字：(number, index)</li></ul><h3 id="6-1、key"><a href="#6-1、key" class="headerlink" title="6.1、key"></a>6.1、key</h3><p>v-for 要绑定一个key使用，key的类型String或Number</p><p>用id来绑定key，保持唯一性，如果不唯一，报错</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(student, index) in studentList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;student.id&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;&#123;student.id&#125;&#125;- &#123;&#123;student.name&#125;&#125;-&#123;&#123;student.age&#125;&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">const</span> studentList = [</span><br><span class="line">            &#123; <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;001&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">19</span> &#125;,</span><br><span class="line">            &#123; <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;002&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span> &#125;,</span><br><span class="line">            &#123; <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;003&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span> &#125;,</span><br><span class="line">        ]</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">            <span class="attr">el</span>: <span class="string">&#x27;.app&#x27;</span>,</span><br><span class="line">            <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    studentList</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><h4 id="①-key的原理"><a href="#①-key的原理" class="headerlink" title="① key的原理"></a>① key的原理</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">虚拟DOM中key的作用：</span><br><span class="line"></span><br><span class="line">key是虚拟DOM对象的标识，当数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】, 随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：</span><br><span class="line"></span><br><span class="line">对比规则：</span><br><span class="line"></span><br><span class="line">(1). 旧虚拟DOM中找到了与新虚拟DOM相同的key：</span><br><span class="line"></span><br><span class="line">①若虚拟DOM中内容没变, 直接使用之前的真实DOM</span><br><span class="line"></span><br><span class="line">②若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM</span><br><span class="line"></span><br><span class="line">(2). 旧虚拟DOM中未找到与新虚拟DOM相同的key创建新的真实DOM，随后渲染到到页面。</span><br><span class="line"></span><br><span class="line">用index作为key可能会引发的问题：</span><br><span class="line"></span><br><span class="line">(1). 若对数据进行：逆序添加、逆序删除等破坏顺序操作: 会产生没有必要的真实DOM更新 ==&gt; 界面效果没问题, 但效率低</span><br><span class="line"></span><br><span class="line">(2). 如果结构中还包含输入类的DOM： 会产生错误DOM更新 ==&gt;界面有问题</span><br><span class="line"></span><br><span class="line">开发中如何选择key:</span><br><span class="line"></span><br><span class="line">(1). 最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。</span><br><span class="line"></span><br><span class="line">(2). 如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用index作为key是没有问题的。</span><br></pre></td></tr></table></figure><h2 id="7、过滤器"><a href="#7、过滤器" class="headerlink" title="7、过滤器"></a>7、过滤器</h2><h3 id="7-1、私有过滤器"><a href="#7-1、私有过滤器" class="headerlink" title="7.1、私有过滤器"></a>7.1、私有过滤器</h3><p>进行文本格式化，常用在<strong>插值语法</strong>，和<strong>v-bind属性绑定</strong>上</p><p>使用格式：加在尾部，由“管道符 | ”调用</p><p>过滤器函数，必须定义到vm中filters配置对象中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 管道符后为过滤器方法 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;msg | upperCase&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>      </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">el</span>: <span class="string">&#x27;.root&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">msg</span>: <span class="string">&#x27;hello world&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 私有过滤器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">filters</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 用val接收传来的值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">upperCase</span>(<span class="params">val</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(val);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">return</span> val.<span class="title function_">toUpperCase</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="7-2、全局过滤器"><a href="#7-2、全局过滤器" class="headerlink" title="7.2、全局过滤器"></a>7.2、全局过滤器</h3><p>Vue.filter() 方法接收两个参数：</p><p>1.全局过滤器的名字</p><p>2.全局过滤器的处理方法（函数）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局过滤器</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;upperCase&#x27;</span>,<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> val.<span class="title function_">toUpperCase</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="8、监听器"><a href="#8、监听器" class="headerlink" title="8、监听器"></a>8、监听器</h2><h3 id="8-1、监视属性"><a href="#8-1、监视属性" class="headerlink" title="8.1、监视属性"></a>8.1、监视属性</h3><ul><li>通过vm对象的<code>$watch()</code>或<code>watch配置</code>来监视指定的属性</li><li>当属性发生变化时，自动调用watch函数</li></ul><p><strong>注意：监视的属性必须存在</strong></p><p>两种写法：</p><ol><li>vue对象中传入watch配置对象</li><li>通过vm.$watch()方法 （更灵活）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种写法</span></span><br><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line"><span class="attr">isHot</span>:&#123;</span><br><span class="line"><span class="attr">immediate</span>:<span class="literal">true</span>, <span class="comment">//初始化时让handler调用一下</span></span><br><span class="line"><span class="comment">//handler什么时候调用？当isHot发生改变时。</span></span><br><span class="line"><span class="title function_">handler</span>(<span class="params">newValue,oldValue</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot被修改了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种写法</span></span><br><span class="line">vm.$watch(<span class="string">&#x27;isHot&#x27;</span>,&#123;</span><br><span class="line"><span class="attr">immediate</span>:<span class="literal">true</span>, <span class="comment">//初始化时让handler调用一下</span></span><br><span class="line"><span class="comment">//handler什么时候调用？当isHot发生改变时。</span></span><br><span class="line"><span class="title function_">handler</span>(<span class="params">newValue,oldValue</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot被修改了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="8-2、深度监视"><a href="#8-2、深度监视" class="headerlink" title="8.2、深度监视"></a>8.2、深度监视</h3><p>(1). Vue中的watch默认不监测对象内部值的改变（一层）。</p><p>(2). 配置deep:true可以监测对象内部值改变（多层）。</p><p>备注：</p><p>(1). Vue自身可以监测对象内部值的改变，但Vue提供的watch默认不可以！</p><p>(2). 使用watch时根据数据的具体结构，决定是否采用深度监视。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">numbers</span>:&#123;</span><br><span class="line"><span class="attr">deep</span>:<span class="literal">true</span>,</span><br><span class="line"><span class="title function_">handler</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;numbers改变了&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9、计算属性-computed"><a href="#9、计算属性-computed" class="headerlink" title="9、计算属性( computed)"></a>9、计算属性( computed)</h2><ol><li>要计算的属性不存在（<strong>未定义在data中</strong>），需要计算得来。</li><li><strong>结果用在插值语法，v-bind，方法中</strong></li><li>原理：底层借助了Objcet.defineproperty方法提供的getter和setter。</li></ol><h4 id="get函数什么时候执行？"><a href="#get函数什么时候执行？" class="headerlink" title="get函数什么时候执行？"></a>get函数什么时候执行？</h4><p>(1). 初次读取时会执行一次。</p><p>(2). 当依赖的数据发生改变时会被再次调用。</p><p>优势：与methods实现相比，内部有缓存机制（复用），效率更高，调试方便。</p><p>备注：</p><p>1.计算属性最终会出现在vm上，直接读取使用即可。</p><p>2.如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变。</p><p>例：计算a+b的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;num.a&quot;</span>&gt;</span>+<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;num.b&quot;</span>&gt;</span>=<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;sum&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">el</span>: <span class="string">&#x27;.root&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">num</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">a</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">b</span>: <span class="number">0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">sum</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">get</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="keyword">return</span> <span class="title class_">Number</span>(<span class="variable language_">this</span>.<span class="property">num</span>[<span class="string">&#x27;a&#x27;</span>]) + <span class="title class_">Number</span>(<span class="variable language_">this</span>.<span class="property">num</span>[<span class="string">&#x27;b&#x27;</span>])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">set</span>(<span class="params">val</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(val);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="10、表单数据"><a href="#10、表单数据" class="headerlink" title="10、表单数据"></a>10、表单数据</h2><p>官方文档: <a href="https://cn.vuejs.org/v2/guide/forms.html">https://cn.vuejs.org/v2/guide/forms.html</a></p><p>如果有多选框，v-model设置成数组，添加value</p><h3 id="收集表单数据："><a href="#收集表单数据：" class="headerlink" title="收集表单数据："></a>收集表单数据：</h3><p><code>&lt;input type=&quot;text&quot;/&gt;</code>，则v-model收集的是value值，用户输入的就是value值。</p><p><code>&lt;input type=&quot;radio&quot;/&gt;</code>，则v-model收集的是value值，且要给标签配置value值。</p><p><code>&lt;input type=&quot;checkbox&quot;/&gt;</code><strong>多选就是数组，单选就是boolean</strong></p><p>1.没有配置input的value属性，那么收集的就是checked（勾选 or 未勾选，是布尔值）</p><p>2.配置input的value属性:</p><ul><li>v-model的初始值是非数组，那么收集的就是checked（勾选 or 未勾选，是布尔值）</li><li>v-model的初始值是数组，那么收集的的就是value组成的数组</li></ul><h3 id="v-model的三个修饰符："><a href="#v-model的三个修饰符：" class="headerlink" title="v-model的三个修饰符："></a>v-model的三个修饰符：</h3><ul><li>lazy：失去焦点再收集数据</li><li>number：输入字符串转为有效的数字</li><li>trim：输入首尾空格过滤</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;form @submit.<span class="property">prevent</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><br><span class="line">账号：&lt;input type=<span class="string">&quot;text&quot;</span> v-model.<span class="property">trim</span>=<span class="string">&quot;userInfo.account&quot;</span>&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">密码：&lt;input type=<span class="string">&quot;password&quot;</span> v-model=<span class="string">&quot;userInfo.password&quot;</span>&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">年龄：&lt;input type=<span class="string">&quot;number&quot;</span> v-model.<span class="property">number</span>=<span class="string">&quot;userInfo.age&quot;</span>&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">性别：</span><br><span class="line">男&lt;input type=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;sex&quot;</span> v-model=<span class="string">&quot;userInfo.sex&quot;</span> value=<span class="string">&quot;male&quot;</span>&gt;</span><br><span class="line">女&lt;input type=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;sex&quot;</span> v-model=<span class="string">&quot;userInfo.sex&quot;</span> value=<span class="string">&quot;female&quot;</span>&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">爱好：</span><br><span class="line">学习&lt;input type=<span class="string">&quot;checkbox&quot;</span> v-model=<span class="string">&quot;userInfo.hobby&quot;</span> value=<span class="string">&quot;study&quot;</span>&gt;</span><br><span class="line">打游戏&lt;input type=<span class="string">&quot;checkbox&quot;</span> v-model=<span class="string">&quot;userInfo.hobby&quot;</span> value=<span class="string">&quot;game&quot;</span>&gt;</span><br><span class="line">吃饭&lt;input type=<span class="string">&quot;checkbox&quot;</span> v-model=<span class="string">&quot;userInfo.hobby&quot;</span> value=<span class="string">&quot;eat&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">所属校区</span><br><span class="line">&lt;select v-model=<span class="string">&quot;userInfo.city&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择校区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;beijing&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shanghai&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shenzhen&quot;</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;wuhan&quot;</span>&gt;</span>武汉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line">&lt;/select&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">其他信息：</span><br><span class="line">&lt;textarea v-model.<span class="property">lazy</span>=<span class="string">&quot;userInfo.other&quot;</span>&gt;&lt;<span class="regexp">/textarea&gt; &lt;br/</span>&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.agree&quot;</span>&gt;</span>阅读并接受<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.atguigu.com&quot;</span>&gt;</span>《用户协议》<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line"><span class="attr">userInfo</span>:&#123;</span><br><span class="line"><span class="attr">account</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="attr">password</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line"><span class="attr">sex</span>:<span class="string">&#x27;female&#x27;</span>,</span><br><span class="line"><span class="attr">hobby</span>:[],</span><br><span class="line"><span class="attr">city</span>:<span class="string">&#x27;beijing&#x27;</span>,</span><br><span class="line"><span class="attr">other</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="attr">agree</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line"><span class="title function_">demo</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">userInfo</span>))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="11、vue生命周期"><a href="#11、vue生命周期" class="headerlink" title="11、vue生命周期"></a>11、vue生命周期</h2><ol><li>又名：生命周期回调函数、生命周期函数、生命周期钩子。</li><li>是什么：Vue在关键时刻帮我们调用的一些特殊名称的函数。</li><li>生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的。</li><li>生命周期函数中的this指向是vm 或 组件实例对象。</li></ol><h3 id="1-初始化显示"><a href="#1-初始化显示" class="headerlink" title="1.初始化显示"></a>1.初始化显示</h3><ul><li>beforeCreate()</li><li>created()</li><li>beforeMount()</li><li>mounted()</li></ul><h3 id="2-更新状态"><a href="#2-更新状态" class="headerlink" title="2,更新状态"></a>2,更新状态</h3><ul><li>beforeUpdate()</li><li>updated()</li></ul><h3 id="3-销毁-vue-实例-vm-destory"><a href="#3-销毁-vue-实例-vm-destory" class="headerlink" title="3.销毁 vue 实例: vm.$destory()"></a>3.销毁 vue 实例: vm.$destory()</h3><ul><li>beforeDestory()</li><li>destoryed()</li></ul><h4 id="常用的生命周期方法"><a href="#常用的生命周期方法" class="headerlink" title="常用的生命周期方法"></a>常用的生命周期方法</h4><ul><li><code>mounted()</code>: 发送ajax请求, 启动定时器、绑定自定义事件、订阅消息等异步任务【初始化操作】</li><li><code>beforeDestroy()</code>: 做收尾工作, 如: 清除定时器、解绑自定义事件、取消订阅消息等【首尾工作】</li></ul><h2 id="12、组件"><a href="#12、组件" class="headerlink" title="12、组件"></a>12、组件</h2><h3 id="12-1、单文件组件"><a href="#12-1、单文件组件" class="headerlink" title="12.1、单文件组件"></a>12.1、单文件组件</h3><p>组成</p><ul><li>页面模块</li><li>js模块</li><li>样式模块</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    页面模板</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">data</span>(<span class="params"></span>) &#123;<span class="keyword">return</span> &#123;&#125;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">methods</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">computed</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">components</span>: &#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scope</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">样式定义</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="①-使用"><a href="#①-使用" class="headerlink" title="① 使用"></a>① 使用</h4><ol><li>引用组件</li><li>注册组件</li><li>使用组件标签</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!--使用组件--&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">HelloWorld</span>&gt;</span><span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">hello-world</span>&gt;</span><span class="tag">&lt;/<span class="name">hello-world</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 引入组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">HelloWorld</span> <span class="keyword">from</span> <span class="string">&#x27;./components/HelloWorld&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 注册组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title class_">HelloWorld</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring注解驱动总结——AOP</title>
      <link href="/blog/2019/04/24/Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E2%80%94%E2%80%94AOP/"/>
      <url>/blog/2019/04/24/Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E2%80%94%E2%80%94AOP/</url>
      
        <content type="html"><![CDATA[<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><ol><li>将业务逻辑和切面类加入到IOC容器中（<code>@Aspect</code>，定义切面类）</li><li>切入点表达式，及通知的方法注解</li><li>开启注解的aop功能<code>@EnableAspectJAutoProxy</code></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(int com.itheima.dao.BookDao.select())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt2</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pt2()&quot;)</span></span><br><span class="line">    <span class="comment">// ProceedingJoinPoint 环绕通知获取方法的数据</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">aroundSelect</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;around before advice ...&quot;</span>);</span><br><span class="line">        <span class="comment">//表示对原始操作的调用</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;around after advice ...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AopConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring注解驱动总结——IOC</title>
      <link href="/blog/2019/04/20/Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E2%80%94%E2%80%94IOC/"/>
      <url>/blog/2019/04/20/Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E2%80%94%E2%80%94IOC/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Configration-Bean"><a href="#1-Configration-Bean" class="headerlink" title="1.@Configration + @Bean"></a>1.@Configration + @Bean</h2><ul><li><code>@Configration</code> ：告诉spring，这是一个配置类</li><li><code>@Bean</code>： 为ioc容器中注入bean，<strong>方法名既是注入的对象名</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个配置类也是一个组件 </span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 告诉Spring这是一个配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainConfig</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Bean注解是给IOC容器中注册一个bean，</span></span><br><span class="line"><span class="comment">//类型自然就是返回值的类型，id默认是用方法名作为id</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Person <span class="title function_">person</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangSan&quot;</span>, <span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">测试类</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">/</span></span><br><span class="line"><span class="comment">public class MainTest &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="comment">//ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span></span><br><span class="line"><span class="comment">//Person person = (Person) applicationContext.getBean(&quot;person&quot;);</span></span><br><span class="line"><span class="comment">//System.out.println(person);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig.class);</span></span><br><span class="line"><span class="comment">Person person = applicationContext.getBean(Person.class);</span></span><br><span class="line"><span class="comment">System.out.println(person);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure><h2 id="2、-ComponentScan"><a href="#2、-ComponentScan" class="headerlink" title="2、@ComponentScan"></a>2、@ComponentScan</h2><p>通过包扫描，将标注@Repository、@Service、@Controller、@Component注解的类自动注入到Spring容器中。</p><p>UserDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扫描对应的包，加载对应的bean到ioc容器当中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1、排除和包含"><a href="#2-1、排除和包含" class="headerlink" title="2.1、排除和包含"></a>2.1、排除和包含</h3><h5 id="①排除"><a href="#①排除" class="headerlink" title="①排除"></a>①排除</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(value=&quot;com.test&quot;, excludeFilters=&#123;</span></span><br><span class="line"><span class="meta">/*</span></span><br><span class="line"><span class="meta"> * type：指定你要排除的规则，是按照注解进行排除，还是按照给定的类型进行排除，还是按照正则表达式进行排除，等等</span></span><br><span class="line"><span class="meta"> * classes：除了@Controller和@Service标注的组件之外，IOC容器中剩下的组件我都要，即相当于是我要排除@Controller和@Service这俩注解标注的组件。</span></span><br><span class="line"><span class="meta"> */</span></span><br><span class="line"><span class="meta">@Filter(type=FilterType.ANNOTATION, classes=&#123;Controller.class, Service.class&#125;)</span></span><br><span class="line"><span class="meta">&#125;)</span> <span class="comment">// value指定要扫描的包</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="②包含"><a href="#②包含" class="headerlink" title="②包含"></a>②包含</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(value=&quot;com.test&quot;, includeFilters=&#123;</span></span><br><span class="line"><span class="meta">/*</span></span><br><span class="line"><span class="meta"> * type：指定你要排除的规则，是按照注解进行排除，还是按照给定的类型进行排除，还是按照正则表达式进行排除，等等</span></span><br><span class="line"><span class="meta"> * classes：我们需要Spring在扫描时，只包含@Controller注解标注的类</span></span><br><span class="line"><span class="meta"> */</span></span><br><span class="line"><span class="meta">@Filter(type=FilterType.ANNOTATION, classes=&#123;Controller.class&#125;)</span></span><br><span class="line"><span class="meta">&#125;, useDefaultFilters=false)</span> <span class="comment">// value指定要扫描的包</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3、-Import"><a href="#3、-Import" class="headerlink" title="3、@Import"></a>3、@Import</h2><p>向Spring容器中注册bean通常有以下几种方式：</p><ol><li>@Configuration+@Bean</li><li>@ComponentScan+@Repository&#x2F;@Service&#x2F;@Controller&#x2F;@Component</li><li><strong>@Import</strong></li></ol><h3 id="3-1、-Import注解的三种用法主要包括："><a href="#3-1、-Import注解的三种用法主要包括：" class="headerlink" title="3.1、@Import注解的三种用法主要包括："></a>3.1、@Import注解的三种用法主要包括：</h3><ol><li>直接填写class数组的方式</li><li>**ImportSelector接口的方式，即批量导入</li><li>ImportBeanDefinitionRegistrar接口方式，即手工注册bean到容器中</li></ol><h4 id="①-Import"><a href="#①-Import" class="headerlink" title="①@Import"></a>①@Import</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(&#123;User.class&#125;)</span>  <span class="comment">// 将User类加载到ioc容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="②ImportSelector接口的方式"><a href="#②ImportSelector接口的方式" class="headerlink" title="②ImportSelector接口的方式"></a>②ImportSelector接口的方式</h4><ul><li>ImportSelector接口是Spring中导入外部配置的核心接口，在Spring Boot的自动化配置和@EnableXXX（功能性注解）都有它的存在</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyImportSelector</span> <span class="keyword">implements</span> <span class="title class_">ImportSelector</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值：就是要导入到容器中的组件的全类名</span></span><br><span class="line"><span class="comment">// AnnotationMetadata：当前标注@Import注解的类的所有注解信息，也就是说不仅能获取到@Import注解里面的信息，还能获取到其他注解的信息</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法不要返回null值，否则会报空指针异常</span></span><br><span class="line"><span class="comment">//return new String[]&#123;&#125;; // 可以返回一个空数组</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123; <span class="string">&quot;com.test.bean.User&quot;</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="③ImportBeanDefinitionRegistrar接口"><a href="#③ImportBeanDefinitionRegistrar接口" class="headerlink" title="③ImportBeanDefinitionRegistrar接口"></a>③ImportBeanDefinitionRegistrar接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyImportBeanDefinitionRegistrar</span> <span class="keyword">implements</span> <span class="title class_">ImportBeanDefinitionRegistrar</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AnnotationMetadata：当前类的注解信息</span></span><br><span class="line"><span class="comment"> * BeanDefinitionRegistry：BeanDefinition注册类</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 我们可以通过调用BeanDefinitionRegistry接口中的registerBeanDefinition方法，手动注册所有需要添加到容器中的bean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">RootBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RootBeanDefinition</span>(RainBow.class); <span class="comment">// bean的定义信息</span></span><br><span class="line"><span class="comment">// 注册一个bean，并且指定bean的名称</span></span><br><span class="line">registry.registerBeanDefinition(<span class="string">&quot;rainBow&quot;</span>, beanDefinition);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;MyImportBeanDefinitionRegistrar.class&#125;)</span> <span class="comment">// @Import快速地导入组件，id默认是组件的全类名</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainConfig2</span> &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RainBow</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4、-Scope"><a href="#4、-Scope" class="headerlink" title="4、@Scope"></a>4、@Scope</h2><ul><li>作用域：<ul><li>ConfigurableBeanFactory#SCOPE_PROTOTYPE</li><li>ConfigurableBeanFactory#SCOPE_SINGLETON</li><li>org.springframework.web.context.WebApplicationContext#SCOPE_REQUEST</li><li>org.springframework.web.context.WebApplicationContext#SCOPE_SESSION</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainConfig2</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span> <span class="comment">// 通过@Scope注解来指定该bean的作用范围</span></span><br><span class="line"><span class="meta">@Bean(&quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Person <span class="title function_">person</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;美美侠&quot;</span>, <span class="number">25</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5、-Lazy-懒加载"><a href="#5、-Lazy-懒加载" class="headerlink" title="5、@Lazy 懒加载"></a>5、@Lazy 懒加载</h2><p>延时加载，只对单例Bean生效<br>初始化ioc时不创建对象，在第一次获取bean时，创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainConfig2</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Lazy</span></span><br><span class="line"><span class="meta">@Bean(&quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Person <span class="title function_">person</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;给容器中添加咱们这个Person对象...&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;美美侠&quot;</span>, <span class="number">25</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、FactoryBean（工厂Bean）创建bean对象"><a href="#6、FactoryBean（工厂Bean）创建bean对象" class="headerlink" title="6、FactoryBean（工厂Bean）创建bean对象"></a>6、FactoryBean（工厂Bean）创建bean对象</h2><p>初始化bean的方式 （详见spring-ioc）</p><ul><li>空参</li><li>静态工厂</li><li>实例工厂</li><li>FactoryBean</li></ul><p>实现FactoryBean接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.FactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个Spring定义的FactoryBean</span></span><br><span class="line"><span class="comment"> * T（泛型）：a指定我们要创建什么类型的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ColorFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;Color&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个Color对象，这个对象会添加到容器中</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Color <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot;ColorFactoryBean...getObject...&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Color</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> Color.class; <span class="comment">// 返回这个对象的类型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是单例吗？</span></span><br><span class="line"><span class="comment">// 如果返回true，那么代表这个bean是单实例，在容器中只会保存一份；</span></span><br><span class="line"><span class="comment">// 如果返回false，那么代表这个bean是多实例，每次获取都会创建一个新的bean</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、生命周期"><a href="#7、生命周期" class="headerlink" title="7、生命周期"></a>7、生命周期</h2><h3 id="7-1、-Bean"><a href="#7-1、-Bean" class="headerlink" title="7.1、@Bean"></a>7.1、@Bean</h3><p>在@Bean中指定初始化和销毁的方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;car&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.test.bean.Car&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Car</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;car constructor...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;car ... init...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//销毁</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;car ... destroy...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainConfigOfLifeCycle</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean(initMethod=&quot;init&quot;, destroyMethod=&quot;destroy&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Car <span class="title function_">car</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2、InitializingBean-x2F-DisposableBean接口"><a href="#7-2、InitializingBean-x2F-DisposableBean接口" class="headerlink" title="7.2、InitializingBean&#x2F;DisposableBean接口"></a>7.2、InitializingBean&#x2F;DisposableBean接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span>, DisposableBean &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;cat constructor...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 销毁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot;cat destroy...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot;cat afterPropertiesSet...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-3、-PostConstruct注解和-PreDestroy注解"><a href="#7-3、-PostConstruct注解和-PreDestroy注解" class="headerlink" title="7.3、@PostConstruct注解和@PreDestroy注解"></a>7.3、@PostConstruct注解和@PreDestroy注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;dog constructor...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在对象创建完成并且属性赋值完成之后调用</span></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;dog...@PostConstruct...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在容器销毁（移除）对象之前调用</span></span><br><span class="line"><span class="meta">@PreDestroy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destory</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;dog...@PreDestroy...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-4、BeanPostProcessor后置处理器"><a href="#7-4、BeanPostProcessor后置处理器" class="headerlink" title="7.4、BeanPostProcessor后置处理器"></a>7.4、BeanPostProcessor后置处理器</h3><p>BeanPostProcessor是一个接口，其中有两个方法，即postProcessBeforeInitialization和postProcessAfterInitialization</p><ul><li><code>postProcessBeforeInitialization</code>方法是在<strong>bean属性设置完成后，init初始化方法之前执行调用</strong></li><li><code>postProcessAfterInitialization</code>方法会在<strong>自定义初始化方法之后被调用</strong></li></ul><h4 id="①Bean的生命周期"><a href="#①Bean的生命周期" class="headerlink" title="①Bean的生命周期"></a>①Bean的生命周期</h4><p>①创建bean–&gt;②set属性–&gt;③后置处理器前置方法–&gt;④init初始化方法–&gt;⑤后置方法–&gt;⑥bean的使用 –&gt;⑦bean的销毁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 后置处理器，在初始化前后进行处理工作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">// 将后置处理器加入到容器中，这样的话，Spring就能让它工作了</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot;postProcessBeforeInitialization...&quot;</span> + beanName + <span class="string">&quot;=&gt;&quot;</span> + bean);</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot;postProcessAfterInitialization...&quot;</span> + beanName + <span class="string">&quot;=&gt;&quot;</span> + bean);</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="②-BeanPostProcessor后置处理器作用"><a href="#②-BeanPostProcessor后置处理器作用" class="headerlink" title="② BeanPostProcessor后置处理器作用"></a>② BeanPostProcessor后置处理器作用</h4><ul><li>对bean初始化前后进行逻辑增强</li></ul><h2 id="8、-Value和-PropertryResource"><a href="#8、-Value和-PropertryResource" class="headerlink" title="8、@Value和@PropertryResource"></a>8、@Value和@PropertryResource</h2><ul><li><p><code>@Value</code>：为属性赋值</p><ol><li>基本数值</li><li>SpEL表达式，#{}</li><li>取出配置文件的值：${}</li></ol></li><li><p><code>@PropertryResource</code> ：加载外部配置文件</p></li></ul><p>在项目的src&#x2F;main&#x2F;resources目录下新建一个属性文件，例如person.properties，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">person.nickName=zhangsan</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;person.nickName&#125;&quot;)</span> </span><br><span class="line"><span class="keyword">private</span> String nickName; <span class="comment">//  zhangsan</span></span><br></pre></td></tr></table></figure><h2 id="9、-Autowired、-Qualifier、-Primary"><a href="#9、-Autowired、-Qualifier、-Primary" class="headerlink" title="9、@Autowired、@Qualifier、@Primary"></a>9、@Autowired、@Qualifier、@Primary</h2><h3 id="9-1、-Autowired"><a href="#9-1、-Autowired" class="headerlink" title="9.1、@Autowired"></a>9.1、@Autowired</h3><ul><li><code>@Autowired</code>注解默认是<strong>优先按照类型</strong>去容器中找对应的组件，相当于是调用了<code>applicationContext.getBean(类名.class);</code></li><li>如果有相同类型的bean，就按照名称去找，相当于调用了&#96;applicationContext.getBean(“组件的id”);</li></ul><h3 id="9-2、-Qualifier"><a href="#9-2、-Qualifier" class="headerlink" title="9.2、@Qualifier"></a>9.2、@Qualifier</h3><ul><li>如果按照名称找，可以通过<code>@Qualifier(beanName)</code> 指定要注入的bean名称</li></ul><h3 id="9-3、-Primary"><a href="#9-3、-Primary" class="headerlink" title="9.3、@Primary"></a>9.3、@Primary</h3><p>当有多个相同类型的bean时，可以用<code>@Primary</code>指定优先注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainConfigOfAutowired</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Primary</span> <span class="comment">//优先注入bookDao01</span></span><br><span class="line"><span class="meta">@Bean(&quot;bookDao01&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BookDao <span class="title function_">bookDao01</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookDao</span>();</span><br><span class="line"><span class="keyword">return</span> bookDao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean(&quot;bookDao02&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BookDao <span class="title function_">bookDao02</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookDao</span>();</span><br><span class="line"><span class="keyword">return</span> bookDao;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="10、-Resource"><a href="#10、-Resource" class="headerlink" title="10、@Resource"></a>10、@Resource</h2><p>JSR250规范里面定义的一个注解。<strong>该注解默认按照名称进行装配</strong>，名称可以通过<code>name</code>属性进行指定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line"><span class="meta">@Resource</span> </span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11、ApplicationContextAware"><a href="#11、ApplicationContextAware" class="headerlink" title="11、ApplicationContextAware"></a>11、ApplicationContextAware</h2><p>当一个类实现了这个接口（ApplicationContextAware）之后，这个类就可以方便获得ApplicationContext中的所有bean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ApplicationContextAwareProcessor这个类的作用是可以帮我们在组件里面注入IOC容器，</span></span><br><span class="line"><span class="comment"> * 怎么注入呢？我们想要IOC容器的话，比如我们这个Dog组件，只需要实现ApplicationContextAware接口就行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;dog constructor...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在对象创建完成并且属性赋值完成之后调用</span></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123; <span class="comment">// 在这儿打个断点调试一下</span></span><br><span class="line">System.out.println(<span class="string">&quot;dog...@PostConstruct...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在容器销毁（移除）对象之前调用</span></span><br><span class="line"><span class="meta">@PreDestroy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destory</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;dog...@PreDestroy...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="built_in">this</span>.applicationContext = applicationContext;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12、-Profile"><a href="#12、-Profile" class="headerlink" title="12、@Profile"></a>12、@Profile</h2><ul><li>动态切换环境</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;spring3.2之前 <span class="doctag">@Profile</span>注解用在类上</span></span><br><span class="line"><span class="comment"> * spring3.2 之后 <span class="doctag">@Profile</span>注解用在 方法上</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Profile(&quot;dev&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">devDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">BasicDataSource</span> <span class="variable">basicDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicDataSource</span>();</span><br><span class="line">        basicDataSource.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        basicDataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3308/zszxz&quot;</span>);</span><br><span class="line">        basicDataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        basicDataSource.setPassword(<span class="string">&quot;1234&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> basicDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Profile(&quot;prod&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">prodDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">BasicDataSource</span> <span class="variable">basicDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicDataSource</span>();</span><br><span class="line">        basicDataSource.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        basicDataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/zszxz&quot;</span>);</span><br><span class="line">        basicDataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        basicDataSource.setPassword(<span class="string">&quot;1234&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> basicDataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>激活方式 ：在类上使用<code>@ActiveProfiles</code>注解<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span><span class="comment">//创建spring应用上下文</span></span><br><span class="line"><span class="meta">@ActiveProfiles(&quot;dev&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProfileTest</span> &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC</title>
      <link href="/blog/2018/05/28/SpringMVC/"/>
      <url>/blog/2018/05/28/SpringMVC/</url>
      
        <content type="html"><![CDATA[<p>web mvc 框架</p><ul><li>M：Model 模型</li><li>V： view 视图</li><li>C：controller 控制器</li></ul><h2 id="1、上下文对象"><a href="#1、上下文对象" class="headerlink" title="1、上下文对象"></a>1、上下文对象</h2><ul><li>一个 <strong>WebApplicationContext</strong> 对象用来创建 <strong>Spring MVC</strong> 相关的组件，称其为 <strong>Web 上下文对象</strong> ；</li><li>一个用来创建程序中其它的具体功能组件（如逻辑组件、数据层访问组件……），称其为 <strong>Root （根）上下文对象</strong> 。</li></ul><p>WebApplicationContext：控制器，适配器，视图解析器，映射器<br>RootApplicationContext：业务组件，数据组件，工具组件</p><h2 id="2、核心组件"><a href="#2、核心组件" class="headerlink" title="2、核心组件"></a>2、核心组件</h2><ul><li><strong>前端控制器：</strong> 类似于超市的入口；</li><li><strong>用户控制器：</strong> 类似于不同类型的货品架，为用户提供具体的商品买卖；</li><li><strong>映射器：</strong> 类似于超市里的导购员。请问，我要的这个牌子的辣椒酱在哪里，哦，在这里；</li><li><strong>适配器：</strong> 统一控制器，让其有一致对外的接口；</li><li><strong>视图解析器：</strong> 找到视图，并负责渲染视图。</li></ul><h3 id="2-1、中央控制器"><a href="#2-1、中央控制器" class="headerlink" title="2.1、中央控制器"></a>2.1、中央控制器</h3><p>由 <strong>Spring MVC</strong> 框架提供，本质上是一个servlet，对所有请求进行分流；</p><h3 id="2-2、用户控制器"><a href="#2-2、用户控制器" class="headerlink" title="2.2、用户控制器"></a>2.2、用户控制器</h3><p>由开发者实现，用来响应用户的具体请求。如登录请求、注册请求……</p><pre class="mermaid">graph LR    subgraph MVC        d(前端控制器)-->y1(用户控制器1)        d-->y2(用户控制器2)    end    q1(请求1)-->d    q2(请求2)-->d</pre><h3 id="2-3、映射器"><a href="#2-3、映射器" class="headerlink" title="2.3、映射器"></a>2.3、映射器</h3><p>映射器的作用就是检查用户的请求路径中是否存在对应的控制器组件。</p><pre class="mermaid">graph LRsubgraph      q(前端控制器)-->|看看请求是否有相应的控制器|y(映射器)endqing(请求)-->q</pre><h3 id="2-4、适配器"><a href="#2-4、适配器" class="headerlink" title="2.4、适配器"></a>2.4、适配器</h3><p>所谓适配器组件，其本质就是运用适配器设计模式，匹配不兼容的接口规范。</p><p>调用者只能识别接口 2 类型，但是 A 提供的是接口 1 类型。适配器可以把接口 <strong>1</strong> 转换成接口 <strong>2</strong>。这样使用者就能使用 A 提供的功能了。</p><h3 id="2-5、视图解析器"><a href="#2-5、视图解析器" class="headerlink" title="2.5、视图解析器"></a>2.5、视图解析器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户控制器中的方法返回字符串，把这个字符串当成一个视图的<strong>逻辑名</strong>，并映射到<strong>真正的物理视图</strong>。</p><p>无论是 <strong>Spring MVC</strong> 默认提供的、还是开发者自行定义的视图解析器，都必须实现 <strong>ViewResolver</strong> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ViewResolver</span> &#123;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    View <span class="title function_">resolveViewName</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、整体流程"><a href="#3、整体流程" class="headerlink" title="3、整体流程"></a>3、整体流程</h2><pre class="mermaid">stateDiagram-v2        direction LR        请求 --> 前端控制器        前端控制器 --> 映射器        映射器 --> 适配器        适配器 --> 用户控制器        用户控制器 --> 视图解析</pre><ol><li>浏览器的请求到达<strong>前端控制器</strong>（<strong>DispatcherServlet</strong>）；</li><li><strong>前端控制器</strong>解析出请求路径后询问<strong>映射器</strong>，咱们是否提供的有用户需要的<strong>用户控制器</strong>，<strong>映射器</strong>把查询结果返回给<strong>前端控制器</strong>；</li><li><strong>适配器</strong>的作用就是统一不同类型的用户控制器（也体现了 Spring MVC 中用户控制器的多样性和灵活性）；</li><li><strong>用户控制器</strong>开始工作（具体的响应逻辑）；</li><li><strong>用户控制器</strong>返回<strong>视图逻辑名</strong>和视图中所需要的<strong>数据</strong>（<strong>ModelAndView</strong>）；</li><li><strong>前端控制器</strong>询问<strong>视图解析器</strong>，你能够根据逻辑名找到物理视图吗？视图解析器开始工作并找到物理视图；</li><li>前端控制器渲染物理视图和数据，生成浏览器能够识别的数据格式；</li><li>响应浏览器，并在浏览器中显示最终请求结果。</li></ol><h2 id="4、SpringMVC映射"><a href="#4、SpringMVC映射" class="headerlink" title="4、SpringMVC映射"></a>4、SpringMVC映射</h2><h3 id="4-1、-RequestMapping"><a href="#4-1、-RequestMapping" class="headerlink" title="4.1、@RequestMapping"></a>4.1、@RequestMapping</h3><p>浏览器如何找到用户处理器</p><ul><li>***@RequestMapping** 注解的作用：把用户控制器以 <strong>URL</strong> 逻辑名的方式向外映射，用于由外向内的请求调用。<ul><li>标识一个类：设置映射请求的请求路径的初始信息</li><li>标识一个方法：设置映射请求请求路径的具体信息</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestMappingController</span> &#123;</span><br><span class="line"><span class="comment">//此时请求映射所映射的请求的请求路径为：/test/testRequestMapping</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestMapping&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestMapping</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="①请求地址"><a href="#①请求地址" class="headerlink" title="①请求地址"></a>①请求地址</h4><p>value属性设置请求地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/test&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;user/test1&quot;</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="②限定请求方法"><a href="#②限定请求方法" class="headerlink" title="②限定请求方法"></a>②限定请求方法</h4><p>所谓限定请求方法，指用户控制器中的某些方法只响应特定的请求方法。</p><p>在 <strong>HTTP</strong> 协议中请求方法有多种，常用的请求方法如下：</p><ul><li><strong>GET：</strong> 一般用于查询请求，具有幂等性，多次相同的请求会返回相同的结果，所以可以使用浏览器缓存。不会影响系统的整体性能；</li><li><strong>POST：</strong> 一般用于数据保存请求。不具有幂等性，多次操作会产生新的资源；</li><li><strong>DELETE：</strong> 一般用于删除资源请求，可以多次删除；</li><li><strong>PUT：</strong> 一般用于更新数据请求，也具有幂等性，无论更新多次性，结果都一样。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/test&quot;,method=RequestMethod.POST)</span> </span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;user/test1&quot;</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="③请求参数"><a href="#③请求参数" class="headerlink" title="③请求参数"></a>③请求参数</h4><p>params属性通过请求的请求参数匹配请求映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/test&quot;,</span></span><br><span class="line"><span class="meta">method=RequestMethod.POST,</span></span><br><span class="line"><span class="meta">param=&quot;username&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;user/test1&quot;</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="④头信息"><a href="#④头信息" class="headerlink" title="④头信息"></a>④头信息</h4><p>通过 <strong>HTTP</strong> 请求包中的消息头信息进行过滤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/test&quot;,headers=&quot;content-type=text/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">     ...   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、SpringMVC解析数据"><a href="#5、SpringMVC解析数据" class="headerlink" title="5、SpringMVC解析数据"></a>5、SpringMVC解析数据</h2><ul><li>@RequestParam ：关注请求参数中的值；</li><li>@CookieValue：关注 Cookie 的值；</li><li>@RequestHeader 关注请求头的值；</li><li>@PathVariable ：关注请求变量的值。</li></ul><p>一个完整的请求包含3部分</p><ul><li><strong>请求行：</strong> 包括请求方法、请求的资源地址（<strong>URL</strong>） 、<strong>HTTP</strong> 协议版本号；</li><li><strong>消息头：</strong> 消息头是传送给服务器的信息，以 <strong>key：value</strong> 的格式描述；</li><li><strong>请求体：</strong> 以 <strong>key&#x3D;value</strong> 的数据格式保存客户端传递给应用程序的数据</li></ul><h3 id="5-1、-RequestParam"><a href="#5-1、-RequestParam" class="headerlink" title="5.1、@RequestParam"></a>5.1、@RequestParam</h3><p>绑定请求参数</p><p>请求参数可以出现在请求包中的 <strong>2</strong> 个位置：</p><ul><li>用 <strong>?</strong> 的方式附加在 <strong>URL</strong> 后面。如 <a href="http://localhost:8888/saveUser?name=abc">http://localhost:8888/saveUser?name=abc</a> 。name 就是请求参数，abc 是值；</li><li>以类似于 <strong>name&#x3D;abc</strong> 的方式存储在请求体中（<strong>请求方式POST时，在请求体中</strong>）。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/saveUser&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(</span></span><br><span class="line"><span class="params"><span class="meta">@RequestParam(&quot;userName&quot;)</span> String userName,</span></span><br><span class="line"><span class="params"><span class="meta">@RequestParam(&quot;password&quot;)</span>  password)</span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一定要保证 <strong>@RequestParam(“参数名”)</strong> 中的 “参数名” 和请求包中的参数名的命名相同。</p></blockquote><p><strong>@RequestParam</strong> 注解中有 3 个常用的属性：</p><ul><li><strong>value（）：</strong> 指定要解析的请求包中的参数名；</li><li><strong>required（）：</strong> 表示请求包中是否必须存在由 <strong>value（）</strong> 指定的参数名，默认值是 <strong>true</strong>。如果没有此参数则会抛出异常；</li><li><strong>defaultValue（）：</strong> 表示如果不能正确获取到指定参数的值时，则提供一个默认值。设置该参数时，自动将 <strong>required</strong> 设为 <strong>false</strong>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/saveUser&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(</span></span><br><span class="line"><span class="params"><span class="meta">@RequestParam(value = &quot;userName&quot;,</span></span></span><br><span class="line"><span class="meta"><span class="params">defaultValue=&quot;mk&quot;,</span></span></span><br><span class="line"><span class="meta"><span class="params">required = false)</span>  String userName,)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-2、-CookieValue"><a href="#5-2、-CookieValue" class="headerlink" title="5.2、@CookieValue"></a>5.2、@CookieValue</h3><p><strong>@CookieValue</strong> 用来自动绑定请求包中的 <strong>Cookie</strong> 值。</p><p><strong>Cookie</strong> 一般由 <strong>WEB</strong> 应用程序在服务器端创建，通过响应包传递给浏览器，并可以在浏览器端以文件的形式存储。在后续请求过程中，请求包又可以携带此 <strong>Cookie</strong> 返回给服务器。</p><p><strong>Cookie</strong> 所能保存的数据量有限且只能是字符类型，但其应用场景较多，如 <strong>WEB</strong> 程序中的 <strong>Session</strong> 组件的状态维护、用户免输入登录、历史记录显示等功能都可以通过 <strong>Cookie</strong> 实现。</p><h3 id="5-3、-RequestHeader"><a href="#5-3、-RequestHeader" class="headerlink" title="5.3、@RequestHeader"></a>5.3、@RequestHeader</h3><p>请求包中有很多消息头信息，都是以 <strong>key：value</strong> 的格式存在。在开发过程中，当需要获取这些消息头信息时，可以使用 <strong>@RequestHeader</strong> 注解自动绑定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/header&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getHeader</span><span class="params">(<span class="meta">@RequestHeader(&quot;Accept-Language&quot;)</span> String accpetLanguage)</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-4、-PathVariable"><a href="#5-4、-PathVariable" class="headerlink" title="5.4、@PathVariable"></a>5.4、@PathVariable</h3><p><strong>@PathVariable</strong> 注解用来获取 <strong>URL</strong> 中变量的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user/&#123;userId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUserById</span><span class="params">(<span class="meta">@PathVariable(&quot;userId&quot;)</span> String userId)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、SpringMVC处理JSON"><a href="#6、SpringMVC处理JSON" class="headerlink" title="6、SpringMVC处理JSON"></a>6、SpringMVC处理JSON</h2><h3 id="6-1、-ResponseBody"><a href="#6-1、-ResponseBody" class="headerlink" title="6.1、@ResponseBody"></a>6.1、@ResponseBody</h3><p>将数据以JSON串的方式返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/json&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonAction</span> &#123;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test01&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testJson</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>没有 <strong>@ResponseBody</strong> 注解：Spring MVC 会把返回值 “hello” 理解为视图逻辑名，<strong>通过视图解析器找到视图物理位置</strong>；</li><li>有 <strong>@ResponseBody</strong> 注解： Spring MVC 会把返回值直接写入响应包后交给浏览器。意味着<strong>不需要视图解析器</strong>的参与。</li></ul><h3 id="6-2、-RequestBody"><a href="#6-2、-RequestBody" class="headerlink" title="6.2、@RequestBody"></a>6.2、@RequestBody</h3><p>获取json格式的请求参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test/RequestBody&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestBody</span><span class="params">(<span class="meta">@RequestBody</span> String requestBody)</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;requestBody:&quot;</span>+requestBody);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3、-RestController"><a href="#6-3、-RestController" class="headerlink" title="6.3、@RestController"></a>6.3、@RestController</h3><p>@RestController &#x3D; @Controller+ @ResponseBody</p><h2 id="7、异常处理"><a href="#7、异常处理" class="headerlink" title="7、异常处理"></a>7、异常处理</h2><p><strong>@ControllerAdvice</strong>：放在类上，标志这是个异常处理类<br><strong>@ExceptionHandler</strong>：放在方法上，标志着这是异常处理方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionAdviceAction</span> &#123;</span><br><span class="line"><span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">exception</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;exception&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>@RestControllerAdvice</code><br>RestControllerAdvice&#x3D;ControllerAdvice+ResponseBody。</p><h2 id="8、开启多项辅助功能"><a href="#8、开启多项辅助功能" class="headerlink" title="8、开启多项辅助功能"></a>8、开启多项辅助功能</h2><p>@EnableWebMvc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMVCConfig</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>声明式事务</title>
      <link href="/blog/2018/05/13/%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
      <url>/blog/2018/05/13/%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="1、使用"><a href="#1、使用" class="headerlink" title="1、使用"></a>1、使用</h2><ol><li>注册事务管理器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span>&#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSource</span>();</span><br><span class="line">dataSource.setUser(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">dataSource.setPassword(<span class="string">&quot;liayun&quot;</span>);</span><br><span class="line">dataSource.setDriverClass(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">dataSource.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册事务管理器在容器中</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DataSourceTransactionManager <span class="title function_">dataSourceTransactionManager</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>(dataSource());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>开启基于注解的事务管理功能 <code>@EnableTransactionManagement</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><code>@Transactional</code></li></ol><ul><li>在逻辑层添加<code>@Transactional</code> <ul><li>@Transactional标识在方法上，只会影响该方法</li><li>@Transactional标识的类上，会影响类中所有的方法</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UesrService</span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、事务属性"><a href="#2、事务属性" class="headerlink" title="2、事务属性"></a>2、事务属性</h2><h3 id="2-1、只读"><a href="#2-1、只读" class="headerlink" title="2.1、只读"></a>2.1、只读</h3><p><code>@Transactional(readOnly = true)</code></p><ul><li>适用于<strong>只有查询操作</strong></li><li>对于增，改，删会抛出异常：Caused by: java.sql.SQLException: Connection is read-only. Queries leading to data modification are not allowed</li></ul><h3 id="2-2、超时"><a href="#2-2、超时" class="headerlink" title="2.2、超时"></a>2.2、超时</h3><p><code>@Transactional(timeout = 3)</code></p><ul><li>timeout默认为-1，代表<strong>永不超时</strong></li><li><strong>超过特定的时间，事务直接回滚</strong></li></ul><h3 id="2-3、事务的回滚策略"><a href="#2-3、事务的回滚策略" class="headerlink" title="2.3、事务的回滚策略"></a>2.3、事务的回滚策略</h3><p>声明式事务默认只针对<strong>运行时异常回滚</strong>，编译时异常不回滚。<br>可以通过<code>@Transactional</code>中相关属性设置回滚策略</p><ul><li>rollbackFor属性：需要设置一个Class类型的对象</li><li>rollbackForClassName属性：需要设置一个字符串类型的全类名</li><li>noRollbackFor属性：需要设置一个Class类型的对象</li><li>rollbackFor属性：需要设置一个字符串类型的全类名</li></ul><h3 id="2-4、隔离级别"><a href="#2-4、隔离级别" class="headerlink" title="2.4、隔离级别"></a>2.4、隔离级别</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(isolation = Isolation.DEFAULT)</span><span class="comment">//使用数据库默认的隔离级别</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.READ_UNCOMMITTED)</span><span class="comment">//读未提交</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.READ_COMMITTED)</span><span class="comment">//读已提交</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.REPEATABLE_READ)</span><span class="comment">//可重复读</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.SERIALIZABLE)</span><span class="comment">//串行化</span></span><br></pre></td></tr></table></figure><h3 id="2-5、事务传播行为"><a href="#2-5、事务传播行为" class="headerlink" title="2.5、事务传播行为"></a>2.5、事务传播行为</h3><p>通过@Transactional中的propagation属性设置事务传播行为</p><ul><li><p>@Transactional(propagation &#x3D; Propagation.REQUIRED)，默认情况，表示如果当前线程上有已经开启的事务可用，那么就在这个事务中运行。</p></li><li><p>@Transactional(propagation &#x3D; Propagation.REQUIRES_NEW)，表示不管当前线程上是否有已经开启的事务，都要开启新事务。</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>AOP</title>
      <link href="/blog/2018/05/10/AOP/"/>
      <url>/blog/2018/05/10/AOP/</url>
      
        <content type="html"><![CDATA[<h2 id="1、核心概念"><a href="#1、核心概念" class="headerlink" title="1、核心概念"></a>1、核心概念</h2><ul><li>AOP<br>面向切面编程，无侵入式对原有代码增强功能，<strong>将通用逻辑从业务逻辑中分离出来</strong></li></ul><h4 id="连接点"><a href="#连接点" class="headerlink" title="连接点"></a>连接点</h4><ul><li>原有代码的方法</li></ul><h4 id="切入点"><a href="#切入点" class="headerlink" title="切入点"></a>切入点</h4><ul><li>匹配连接点的公式，一个切入点可以连接一个方法，或是多个方法<br>比如，xxx包下的xxx接口xxx方法</li></ul><h4 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h4><ul><li>增强的具体功能</li></ul><h4 id="通知类"><a href="#通知类" class="headerlink" title="通知类"></a>通知类</h4><ul><li>定义通知的类</li></ul><h4 id="切面"><a href="#切面" class="headerlink" title="切面"></a>切面</h4><ul><li>描述通知和切入点的关系</li></ul><h2 id="2、AOP使用"><a href="#2、AOP使用" class="headerlink" title="2、AOP使用"></a>2、AOP使用</h2><h3 id="2-1、xml"><a href="#2-1、xml" class="headerlink" title="2.1、xml"></a>2.1、xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Service --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.offcn.service.impl.AccountServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;accountDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;accountDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置Dao对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.offcn.dao.impl.AccountDaoImpl&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;runner&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;runner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;connectionUtils&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;connectionUtils&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置QueryRunner--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;runner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbutils.QueryRunner&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--连接数据库的必备信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/transmoney&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置Connection的工具类 ConnectionUtils --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;connectionUtils&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.offcn.utils.ConnectionUtils&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 配置事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;txManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.offcn.transaction.TransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入ConnectionUtils --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;connectionUtils&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;connectionUtils&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- aop相关的节点配置 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">&quot;execution ( * com.offcn.service.*.*(..))&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pc&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;txManager&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;beginTransaction&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pc&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;commit&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pc&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;release&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pc&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;rollback&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pc&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2、注解"><a href="#2-2、注解" class="headerlink" title="2.2、注解"></a>2.2、注解</h3><h4 id="①-EnableAspectJAutoProxy-注释，开启aop功能"><a href="#①-EnableAspectJAutoProxy-注释，开启aop功能" class="headerlink" title="①@EnableAspectJAutoProxy 注释，开启aop功能"></a>①<code>@EnableAspectJAutoProxy</code> 注释，开启aop功能</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AopConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="②使用-Aspect定义切面类"><a href="#②使用-Aspect定义切面类" class="headerlink" title="②使用@Aspect定义切面类"></a>②使用<code>@Aspect</code>定义切面类</h4><p>注意：+<code>@Component</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="③声明切入点-Pointcut"><a href="#③声明切入点-Pointcut" class="headerlink" title="③声明切入点@Pointcut"></a>③声明切入点<code>@Pointcut</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.test.dao.BookDao.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="④绑定切入点和通知（通知种类）"><a href="#④绑定切入点和通知（通知种类）" class="headerlink" title="④绑定切入点和通知（通知种类）"></a>④绑定切入点和通知（通知种类）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello aop&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、切入点表达式"><a href="#3、切入点表达式" class="headerlink" title="3、切入点表达式"></a>3、切入点表达式</h2><h3 id="3-1、表达式详解"><a href="#3-1、表达式详解" class="headerlink" title="3.1、表达式详解"></a>3.1、表达式详解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(<span class="keyword">public</span> User com.test.service.UserService.findById(<span class="type">int</span>))</span><br></pre></td></tr></table></figure><ul><li>execution：动作关键字，描述切入点的行为动作，例如execution表示执行到指定切入点</li><li>public:访问修饰符,还可以是public，private等，可以省略</li><li>User：返回值，写返回值类型</li><li>com.test.service：包名，多级包使用点连接</li><li>UserService:类&#x2F;接口名称</li><li>findById：方法名</li><li>int:参数，直接写参数的类型，多个类型用逗号隔开</li><li>异常名：方法定义中抛出指定异常，可以省略</li></ul><h3 id="3-2、通配符"><a href="#3-2、通配符" class="headerlink" title="3.2、通配符"></a>3.2、通配符</h3><ul><li><code>*</code>:单个独立的任意符号，可以独立出现，也可以作为前缀或者后缀的匹配符出现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution（<span class="keyword">public</span> * com.test.*.UserService.find*(*))</span><br></pre></td></tr></table></figure></li><li><code>..</code>：多个连续的任意符号，可以独立出现，常用于简化包名与参数的书写<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution（<span class="keyword">public</span> User com..UserService.findById(..))</span><br></pre></td></tr></table></figure></li></ul><h2 id="3、AOP通知的种类"><a href="#3、AOP通知的种类" class="headerlink" title="3、AOP通知的种类"></a>3、AOP通知的种类</h2><ul><li>前置通知</li><li>后置通知</li><li><strong>&#x3D;&#x3D;环绕通知(重点)&#x3D;&#x3D;</strong></li><li>返回后通知</li><li>抛出异常后通知</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.test.dao.BookDao.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前置</span></span><br><span class="line">    <span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="comment">//此处也可以写成 @Before(&quot;MyAdvice.pt()&quot;),不建议</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//后置</span></span><br><span class="line"><span class="meta">@After(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//环绕</span></span><br><span class="line">    <span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;around before advice ...&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;around after advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最终</span></span><br><span class="line"><span class="meta">@AfterReturning(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterReturning advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 异常后通知</span></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterThrowing advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1、环绕通知获取数据"><a href="#3-1、环绕通知获取数据" class="headerlink" title="3.1、环绕通知获取数据"></a>3.1、环绕通知获取数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(int com.itheima.dao.BookDao.select())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt2</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pt2()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">aroundSelect</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;around before advice ...&quot;</span>);</span><br><span class="line">        <span class="comment">//表示对原始操作的调用</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;around after advice ...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2、AOP通知获取方法返回的数据"><a href="#3-2、AOP通知获取方法返回的数据" class="headerlink" title="3.2、AOP通知获取方法返回的数据"></a>3.2、AOP通知获取方法返回的数据</h3><ul><li>获取切入点方法的参数，所有的通知类型都可以获取参数<ul><li>JoinPoint：适用于前置、后置、返回后、抛出异常后通知</li><li>ProceedingJoinPoint：适用于环绕通知</li></ul></li><li>获取切入点方法返回值，前置和抛出异常后通知是没有返回值，后置通知可有可无，所以不做研究<ul><li>返回后通知</li><li>环绕通知</li></ul></li><li>获取切入点方法运行异常信息，前置和返回后通知是不会有，后置通知可有可无，所以不做研究<ul><li>抛出异常后通知</li><li>环绕通知</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IOC</title>
      <link href="/blog/2018/05/07/IOC/"/>
      <url>/blog/2018/05/07/IOC/</url>
      
        <content type="html"><![CDATA[<h2 id="1、核心概念"><a href="#1、核心概念" class="headerlink" title="1、核心概念"></a>1、核心概念</h2><h3 id="1-1、控制反转"><a href="#1-1、控制反转" class="headerlink" title="1.1、控制反转"></a>1.1、控制反转</h3><ul><li>将对象的<strong>控制和管理权转交给外部</strong>（ioc容器），由主动new对象转为外部提供</li></ul><pre class="mermaid">graph LR        a(new A) -->|转为| b        subgraph IOC            b(A)        end</pre><h3 id="1-2、ioc容器"><a href="#1-2、ioc容器" class="headerlink" title="1.2、ioc容器"></a>1.2、ioc容器</h3><ul><li>负责<strong>实例化</strong>，<strong>配置</strong>，<strong>组装</strong>对象，在ioc中这种对象统称<strong>bean</strong></li></ul><p>配置bean的方式</p><ul><li>xml，java，注解</li></ul><h3 id="1-3、DI"><a href="#1-3、DI" class="headerlink" title="1.3、DI"></a>1.3、DI</h3><ul><li>依赖注入：bean和bean之间的依赖关系<pre class="mermaid">graph LR  subgraph IOC      A -->|依赖| b  end</pre></li></ul><p>配置bean，通过ioc容器获取bean</p><h2 id="2、ioc"><a href="#2、ioc" class="headerlink" title="2、ioc"></a>2、ioc</h2><h3 id="2-1、配置bean"><a href="#2-1、配置bean" class="headerlink" title="2.1、配置bean"></a>2.1、配置bean</h3><p><code>&lt;bean id=&quot;&quot; class=&quot;&quot;/&gt;</code></p><ul><li>id：bean的唯一标识</li><li>class：类的全类名</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td>id</td><td>bean的唯一id</td></tr><tr><td>name</td><td>bean的别名</td></tr><tr><td>class</td><td>bean类型，全类名</td></tr><tr><td>scope</td><td>单例还是非单例</td></tr><tr><td>init-method</td><td>生命周期初始化方法</td></tr><tr><td>destroy-method</td><td>生命周期初销毁方法</td></tr><tr><td>autowire</td><td>自动装配</td></tr><tr><td>factory-method</td><td>工厂方法，静态或是实例</td></tr><tr><td>factory-bean</td><td>实例工厂bean</td></tr><tr><td>lazy-init</td><td>是否为懒加载</td></tr></tbody></table><h3 id="2-2、实例化ioc容器及获取bean对象"><a href="#2-2、实例化ioc容器及获取bean对象" class="headerlink" title="2.2、实例化ioc容器及获取bean对象"></a>2.2、实例化ioc容器及获取bean对象</h3><h4 id="①容器的创建"><a href="#①容器的创建" class="headerlink" title="①容器的创建"></a>①容器的创建</h4><ul><li><code>ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;)</code></li><li><code>FileSystemXmlApplicationContext(&quot;applicationContext.xml&quot;)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="②获取bean对象"><a href="#②获取bean对象" class="headerlink" title="②获取bean对象"></a>②获取bean对象</h4><ul><li><code>getBean(&quot;bean名称&quot;)</code></li><li><code>getBean(&quot;bean名称&quot;,bean.class)</code></li><li><code>getBean(bean.class)</code></li></ul><h4 id="③BeanFactory创建ioc容器"><a href="#③BeanFactory创建ioc容器" class="headerlink" title="③BeanFactory创建ioc容器"></a>③BeanFactory创建ioc容器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForBeanFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Resource</span> <span class="variable">resources</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">BeanFactory</span> <span class="variable">bf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XmlBeanFactory</span>(resources);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> bf.getBean(BookDao.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>BeanFactory</code>是<strong>延迟加载</strong>，只有在获取bean对象的时候才会去创建</li><li><code>ApplicationContext</code>是<strong>立即加载</strong>，容器加载的时候就会创建bean对象</li></ul><h3 id="2-3、bean的socpe属性"><a href="#2-3、bean的socpe属性" class="headerlink" title="2.3、bean的socpe属性"></a>2.3、bean的socpe属性</h3><ul><li><code>singleton</code>默认为单例</li><li><code>prototype</code>为非单例</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">name</span>=<span class="string">&quot;dao&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">scope</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>bean为单例的意思是在Spring的IOC容器中只会有该类的一个对象</li><li>bean对象只有一个就避免了对象的频繁创建与销毁，达到了<strong>bean对象的复用，性能高</strong></li></ul><h3 id="2-4、bean的实例化"><a href="#2-4、bean的实例化" class="headerlink" title="2.4、bean的实例化"></a>2.4、bean的实例化</h3><pre class="mermaid">graph LRs(实例化bean)-->k(1.空参构造方法,2.静态工厂,3.实例工厂,4.factoryBean)</pre><p>对象交给ioc容器去创建，ioc通过<strong>四种方式进行创建对象</strong></p><ul><li><strong>空参构造方法</strong></li><li><strong>静态工厂</strong></li><li><strong>实例工厂</strong></li><li><strong>实现<code>FactoryBean</code>接口</strong></li></ul><h4 id="①构造方法"><a href="#①构造方法" class="headerlink" title="①构造方法"></a>①构造方法</h4><p>通过反射调用空参构造来实例化对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleBean</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ExampleBean</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleBeanTwo</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ExampleBeanTwo</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;exampleBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;examples.ExampleBean&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;anotherExample&quot;</span> <span class="attr">class</span>=<span class="string">&quot;examples.ExampleBeanTwo&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="②通过静态工厂"><a href="#②通过静态工厂" class="headerlink" title="②通过静态工厂"></a>②通过静态工厂</h4><p>使用命名属性<code>factory-method</code>指定静态工厂方法本身的名称</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clientService&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;examples.ClientService&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">factory-method</span>=<span class="string">&quot;createInstance&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ClientService</span> <span class="variable">clientService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClientService</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ClientService</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ClientService <span class="title function_">createInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> clientService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="③实例工厂"><a href="#③实例工厂" class="headerlink" title="③实例工厂"></a>③实例工厂</h4><p>通过实例工厂创建对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.test.factory.UserDaoFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- factory-method:哪个方法,factory-bean:哪个工厂类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getUserDao&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;userFactory&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoFactory</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">UserDao</span> <span class="variable">userDao</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDao</span>();</span><br><span class="line"><span class="keyword">public</span> UserDao <span class="title function_">getUserDao</span><span class="params">()</span>&#123;</span><br><span class="line">reutrn userDao </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="④实现FactoryBean接口"><a href="#④实现FactoryBean接口" class="headerlink" title="④实现FactoryBean接口"></a>④实现FactoryBean接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;UserDao&gt; &#123;</span><br><span class="line">    <span class="comment">//代替原始实例工厂中创建对象的方法</span></span><br><span class="line">    <span class="keyword">public</span> UserDao <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回所创建类的Class对象</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> UserDao.class;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.test.factory.UserDaoFactoryBean&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-5、bean的生命周期"><a href="#2-5、bean的生命周期" class="headerlink" title="2.5、bean的生命周期"></a>2.5、bean的生命周期</h3><ul><li>初始化容器<ul><li>创建对象</li><li>执行属性注入（set）</li><li>BeanPostProcessor，后置处理器，前置功能</li><li>执行bean初始化方法</li><li>BeanPostProcessor，后置处理器，后置功能</li></ul></li><li>使用bean</li><li>销毁bean</li></ul><p>①创建bean–&gt;②set属性–&gt;③后置处理器前置方法–&gt;④init初始化方法–&gt;⑤后置方法–&gt;⑥bean的使用 –&gt;⑦bean的销毁</p><h2 id="3、DI"><a href="#3、DI" class="headerlink" title="3、DI"></a>3、DI</h2><p>依赖注入是一个<strong>过程</strong>，描述对象和对象的内在关系，<strong>代码更干净，解耦</strong></p><h3 id="3-1、构造器注入"><a href="#3-1、构造器注入" class="headerlink" title="3.1、构造器注入"></a>3.1、构造器注入</h3><ul><li>constructor-arg  ref ：引用对应的bean</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookServiceImpl</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.test.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.test.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2、set注入"><a href="#3-2、set注入" class="headerlink" title="3.2、set注入"></a>3.2、set注入</h3><h4 id="①注入引用数据类型"><a href="#①注入引用数据类型" class="headerlink" title="①注入引用数据类型"></a>①注入引用数据类型</h4><ul><li>property</li><li>ref</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.test.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.test.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="②注入基本数据类型"><a href="#②注入基本数据类型" class="headerlink" title="②注入基本数据类型"></a>②注入基本数据类型</h4><ul><li>property</li><li>value</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String databaseName;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> connectionNum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setConnectionNum</span><span class="params">(<span class="type">int</span> connectionNum)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.connectionNum = connectionNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDatabaseName</span><span class="params">(String databaseName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.databaseName = databaseName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.test.dao.impl.BookDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;databaseName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;connectionNum&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2、自动装配"><a href="#3-2、自动装配" class="headerlink" title="3.2、自动装配"></a>3.2、自动装配</h3><p>ioc容器根据bean所依赖的资源去容器中自动查找并装配</p><p>自动装配的方式 <code>autowire</code></p><ul><li><strong>按类型：byType</strong></li><li>按名称：byName</li><li>按构造方法：constructor</li><li>不装配：no</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.test.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--autowire属性：开启自动装配，通常使用按类型装配--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;com.test.service.impl.BookServiceImpl&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-4、管理第三方bean"><a href="#3-4、管理第三方bean" class="headerlink" title="3.4、管理第三方bean"></a>3.4、管理第三方bean</h3><p>加载外部配置文件</p><ol><li><p>resources下创建一个jdbc.properties文件,并添加对应的属性键值对</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/spring_db</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure></li><li><p>在applicationContext.xml中开<code>context</code>命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在配置文件中使用<code>context</code>命名空间下的标签来加载properties配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>通过<code>$&#123;xxxx&#125;</code> 注入属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java8 函数式编程</title>
      <link href="/blog/2017/07/29/Java8/"/>
      <url>/blog/2017/07/29/Java8/</url>
      
        <content type="html"><![CDATA[<h2 id="1、函数式接口和Lambda"><a href="#1、函数式接口和Lambda" class="headerlink" title="1、函数式接口和Lambda"></a>1、函数式接口和Lambda</h2><h3 id="1-1、函数式接口"><a href="#1-1、函数式接口" class="headerlink" title="1.1、函数式接口"></a>1.1、函数式接口</h3><ul><li>只有<strong>一个抽象方法</strong>的接口叫函数式接口，用<code>@FunctionalInterface</code>标识</li></ul><p>Runnable类就是一个函数式接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Runnable</span> &#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2、Lambda表达式"><a href="#1-2、Lambda表达式" class="headerlink" title="1.2、Lambda表达式"></a>1.2、Lambda表达式</h3><p>简化匿名内部类（函数式接口）的写法</p><h4 id="①-语法"><a href="#①-语法" class="headerlink" title="① 语法"></a>① 语法</h4><p><code>(参数列表) -&gt; &#123;代码...&#125;</code></p><ul><li>无参：<code>()-&gt;&#123; //... &#125;</code></li><li>多个参数：<code>(a,b)-&gt;&#123; //.... &#125;</code></li></ul><h4 id="②-案例"><a href="#②-案例" class="headerlink" title="② 案例"></a>② 案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;aaa&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;,<span class="string">&quot;t1&quot;</span>).start();  </span><br><span class="line"></span><br><span class="line"><span class="comment">// Lambda</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt; System.out.println(<span class="string">&quot;bbb&quot;</span>),<span class="string">&quot;t2&quot;</span>).start();</span><br></pre></td></tr></table></figure><h2 id="2、Stream流"><a href="#2、Stream流" class="headerlink" title="2、Stream流"></a>2、Stream流</h2><p>用于<strong>数组和集合</strong>的流式操作</p><ul><li><p>特点</p><ul><li>流是一次性的</li><li>不影响原数据</li></ul></li><li><p>创建流对象</p><ul><li>集合创建stream：<code>集合.stream()</code></li><li>数组创建stream：<code>Arrays.stream(数组)</code></li><li>map创建stream：<code>map.entrySet().stream</code></li></ul></li></ul><p>准备数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="meta">@Accessors(chain = true)</span>  </span><br><span class="line"><span class="meta">@AllArgsConstructor</span>  </span><br><span class="line"><span class="meta">@NoArgsConstructor</span>  </span><br><span class="line"><span class="meta">@EqualsAndHashCode</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> Integer id;  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> Integer age;  </span><br><span class="line">    <span class="keyword">private</span> String address;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;User&gt; <span class="title function_">getUsers</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;zhangsan&quot;</span>, <span class="number">19</span>, <span class="string">&quot;beijing&quot;</span>);  </span><br><span class="line">    <span class="type">User</span> <span class="variable">u2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>, <span class="string">&quot;lisi&quot;</span>, <span class="number">18</span>, <span class="string">&quot;tianjin&quot;</span>);  </span><br><span class="line">    <span class="type">User</span> <span class="variable">u3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">3</span>, <span class="string">&quot;wangwu&quot;</span>, <span class="number">17</span>, <span class="string">&quot;shanghai&quot;</span>);  </span><br><span class="line">    <span class="type">User</span> <span class="variable">u4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">4</span>, <span class="string">&quot;zhaoliu&quot;</span>, <span class="number">18</span>, <span class="string">&quot;xian&quot;</span>);  </span><br><span class="line">    <span class="type">User</span> <span class="variable">u5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">5</span>, <span class="string">&quot;tianqi&quot;</span>, <span class="number">19</span>, <span class="string">&quot;beijing&quot;</span>);  </span><br><span class="line">    List&lt;User&gt; userList = Arrays.asList(u1, u2, u3, u4, u5);  </span><br><span class="line">    <span class="keyword">return</span> userList;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1、常用方法"><a href="#2-1、常用方法" class="headerlink" title="2.1、常用方法"></a>2.1、常用方法</h3><h4 id="①-filter：过滤"><a href="#①-filter：过滤" class="headerlink" title="① filter：过滤"></a>① filter：过滤</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">users.stream()  </span><br><span class="line">        .filter(user -&gt; user.getAge() &gt; <span class="number">18</span>)  <span class="comment">// 过滤出age&gt;18的用户</span></span><br><span class="line">        .forEach(user -&gt; System.out.println(user));</span><br></pre></td></tr></table></figure><h4 id="②-map：替换"><a href="#②-map：替换" class="headerlink" title="② map：替换"></a>② map：替换</h4><p>将流中的数据元素，替换成特定的元素，<strong>一对一的替换</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">userList.stream()  </span><br><span class="line">        .map(user -&gt; <span class="string">&quot;123&quot;</span>)  <span class="comment">// 将userlist中的元素替换成123</span></span><br><span class="line">        .forEach(user-&gt; System.out.println(user));</span><br></pre></td></tr></table></figure><p>User(id&#x3D;1, name&#x3D;zhangsan, age&#x3D;19, address&#x3D;beijing) –&gt; “123”<br>…<br>…</p><h4 id="③-distinct：去重"><a href="#③-distinct：去重" class="headerlink" title="③ distinct：去重"></a>③ distinct：去重</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userList.stream().distinct().forEach(user -&gt; System.out.println(user));</span><br></pre></td></tr></table></figure><h4 id="④-sorted：排序"><a href="#④-sorted：排序" class="headerlink" title="④ sorted：排序"></a>④ sorted：排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">userList.stream()  </span><br><span class="line">        .sorted((user1, user2) -&gt; user1.getAge() - user2.getAge())  </span><br><span class="line">        .forEach(user-&gt; System.out.println(user));</span><br></pre></td></tr></table></figure><h4 id="⑤-limit：截取几条"><a href="#⑤-limit：截取几条" class="headerlink" title="⑤ limit：截取几条"></a>⑤ limit：截取几条</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">userList.stream()  </span><br><span class="line">        .map(user-&gt;user.getAddress())  </span><br><span class="line">        .distinct()  </span><br><span class="line">        .limit(<span class="number">2</span>) <span class="comment">// 只要前两条 </span></span><br><span class="line">        .forEach(user-&gt; System.out.println(user));</span><br></pre></td></tr></table></figure><h4 id="⑥-skip：跳过前n个元素"><a href="#⑥-skip：跳过前n个元素" class="headerlink" title="⑥ skip：跳过前n个元素"></a>⑥ skip：跳过前n个元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">userList.stream()  </span><br><span class="line">        .skip(<span class="number">2</span>)  <span class="comment">// 跳过前两个元素，留下剩下的</span></span><br><span class="line">        .forEach(user -&gt; System.out.println(user));</span><br></pre></td></tr></table></figure><h4 id="⑦-flatMap"><a href="#⑦-flatMap" class="headerlink" title="⑦ flatMap"></a>⑦ flatMap</h4><p>map是一对一的替换<br>flatMap是<strong>一对多的</strong>替换，将另一个集合遍历出的元素，替换原有的元素，<strong>一对多的替换</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; s = Arrays.asList(<span class="string">&quot;hh&quot;</span>,<span class="string">&quot;xx&quot;</span>);  </span><br><span class="line">userList.stream()  s</span><br><span class="line">        .limit(<span class="number">2</span>)  </span><br><span class="line">        .flatMap(user-&gt;s.stream()) <span class="comment">// 将s的元素，替换user</span></span><br><span class="line">        .forEach(user-&gt; System.out.println(user));</span><br></pre></td></tr></table></figure><p>运行结果：s遍历后的每一个元素，替换userlist的每一个元素<br>    hh<br>    xx<br>    hh<br>    xx</p><h4 id="⑧-count：元素个数"><a href="#⑧-count：元素个数" class="headerlink" title="⑧ count：元素个数"></a>⑧ count：元素个数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> userList.stream().count();  </span><br><span class="line">System.out.println(count);</span><br></pre></td></tr></table></figure><h4 id="⑨-foreach：遍历"><a href="#⑨-foreach：遍历" class="headerlink" title="⑨ foreach：遍历"></a>⑨ foreach：遍历</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userList.stream().forEach(item-&gt; System.out.println(item));</span><br></pre></td></tr></table></figure><h4 id="⑩-max-x2F-min：最大值-x2F-最小值"><a href="#⑩-max-x2F-min：最大值-x2F-最小值" class="headerlink" title="⑩ max&#x2F;min：最大值&#x2F;最小值"></a>⑩ max&#x2F;min：最大值&#x2F;最小值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Integer&gt; max = userList.stream()  </span><br><span class="line">        .map(user -&gt; user.getAge())  </span><br><span class="line">        .max((age1, age2) -&gt; age1 - age2);  </span><br><span class="line"><span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> max.get();  </span><br><span class="line">System.out.println(<span class="string">&quot;最大的年龄：&quot;</span>+integer); <span class="comment">// 19</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Optional&lt;Integer&gt; min = userList.stream()</span><br><span class="line">.map(user -&gt; user.getAge())</span><br><span class="line">.min((age1, age2) -&gt; age1 - age2);  </span><br><span class="line">System.out.println(<span class="string">&quot;最小的年龄：&quot;</span>+min.get()); <span class="comment">//17</span></span><br></pre></td></tr></table></figure><h4 id="⑩①-collect：结果转换成一个集合"><a href="#⑩①-collect：结果转换成一个集合" class="headerlink" title="⑩① collect：结果转换成一个集合"></a>⑩① collect：结果转换成一个集合</h4><ul><li>list：collect(collectors.toList())</li><li>set：collect(collectors.toSet())</li><li>map：collect(collectors.tomap())</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// list</span></span><br><span class="line">List&lt;String&gt; list = userList.stream()  </span><br><span class="line">        .map(user -&gt; user.getAddress())  </span><br><span class="line">        .collect(Collectors.toList());  </span><br><span class="line">list.stream().forEach(item-&gt; System.out.println(item));  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//set  </span></span><br><span class="line">  </span><br><span class="line">Set&lt;User&gt; collect = userList.stream()</span><br><span class="line">.collect(Collectors.toSet());  </span><br><span class="line">collect.stream().forEach(item-&gt; System.out.println(item));  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//map</span></span><br><span class="line">  </span><br><span class="line">Map&lt;String, String&gt; collect1 = userList.stream()  </span><br><span class="line"><span class="comment">// k:getName,v:getAddress</span></span><br><span class="line">        .collect(Collectors.toMap(k -&gt; k.getName(), v -&gt; v.getAddress()));  </span><br><span class="line">collect1.entrySet().stream().forEach(item-&gt; System.out.println(item));</span><br></pre></td></tr></table></figure><h4 id="⑩②-anyMatch"><a href="#⑩②-anyMatch" class="headerlink" title="⑩② anyMatch"></a>⑩② anyMatch</h4><p>是否有符合条件的任意元素，<strong>返回为布尔</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> userList.stream().anyMatch(user -&gt; user.getAge() &gt; <span class="number">18</span>);</span><br></pre></td></tr></table></figure><h4 id="⑩③-allMatch"><a href="#⑩③-allMatch" class="headerlink" title="⑩③ allMatch"></a>⑩③ allMatch</h4><p>所有的元素都匹配，才为true，否则为false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> userList.stream()</span><br><span class="line">.map(user -&gt; user.getAge())</span><br><span class="line">.allMatch(age -&gt; age &gt; <span class="number">18</span>);</span><br></pre></td></tr></table></figure><h4 id="⑩④-findAny-x2F-findFirst"><a href="#⑩④-findAny-x2F-findFirst" class="headerlink" title="⑩④ findAny&#x2F;findFirst"></a>⑩④ findAny&#x2F;findFirst</h4><p>findAny：获取任意一个<br>findFirst：获取第一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Integer&gt; any = userList.stream()  </span><br><span class="line">        .map(user -&gt; user.getAge())  </span><br><span class="line">        .findAny();  </span><br><span class="line">System.out.println(any.get());  </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">Optional&lt;User&gt; first = userList.stream().findFirst();  </span><br><span class="line">System.out.println(first.get());</span><br></pre></td></tr></table></figure><h4 id="⑩⑤-reduce：计算"><a href="#⑩⑤-reduce：计算" class="headerlink" title="⑩⑤ reduce：计算"></a>⑩⑤ reduce：计算</h4><p>按照某种规则使集合中的元素进行计算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Integer&gt; reduce = userList.stream()  </span><br><span class="line">        .map(user -&gt; user.getAge())  </span><br><span class="line">        <span class="comment">// 计算年龄的总和  </span></span><br><span class="line">        .reduce((age, age1) -&gt; age + age1);  </span><br><span class="line"><span class="type">Integer</span> <span class="variable">age</span> <span class="operator">=</span> reduce.get();  </span><br><span class="line">System.out.println(<span class="string">&quot;年龄的和为：&quot;</span>+age); <span class="comment">// 91</span></span><br></pre></td></tr></table></figure><h2 id="3、Optional"><a href="#3、Optional" class="headerlink" title="3、Optional"></a>3、Optional</h2><p>Optional 类是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。</p><h3 id="3-1、创建optional对象"><a href="#3-1、创建optional对象" class="headerlink" title="3.1、创建optional对象"></a>3.1、创建optional对象</h3><ul><li>调用Optional的静态方法，of(),ofNullable()<ul><li>Optional.of(对象)：如果对象为空，则<strong>抛出</strong>空指针异常</li><li>Optional.ofNullable(对象)：如果对象为空，<strong>不会抛出</strong>空指针异常，后面可以跟stream流的方法</li></ul></li></ul><p>Optional.of(对象)<br>    对象为空，会抛出空指针</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="literal">null</span>;  </span><br><span class="line">Optional&lt;Object&gt; optional = Optional.of(<span class="literal">null</span>);  </span><br><span class="line">System.out.println(optional.get());     <span class="comment">// java.lang.NullPointerException</span></span><br></pre></td></tr></table></figure><p>Optional.ofNullable(对象)<br>    即使对象为空，也不会抛出空指针</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="literal">null</span>;  </span><br><span class="line">Optional&lt;Object&gt; obj1 = Optional.ofNullable(obj);  </span><br><span class="line">System.out.println(obj1);   <span class="comment">// Optional.empty</span></span><br></pre></td></tr></table></figure><h3 id="3-2、判断是否为空：isPresent"><a href="#3-2、判断是否为空：isPresent" class="headerlink" title="3.2、判断是否为空：isPresent()"></a>3.2、判断是否为空：isPresent()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="literal">null</span>;  </span><br><span class="line">Optional&lt;Object&gt; obj1 = Optional.ofNullable(obj);  </span><br><span class="line">System.out.println(obj1);   <span class="comment">// Optional.empty  </span></span><br><span class="line">  </span><br><span class="line"><span class="type">boolean</span> <span class="variable">present</span> <span class="operator">=</span> obj1.isPresent();  </span><br><span class="line">System.out.println(present); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="3-3、获取值：get"><a href="#3-3、获取值：get" class="headerlink" title="3.3、获取值：get()"></a>3.3、获取值：get()</h3><h2 id="4、方法引用"><a href="#4、方法引用" class="headerlink" title="4、方法引用"></a>4、方法引用</h2><p>语法：类名：：方法名</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
